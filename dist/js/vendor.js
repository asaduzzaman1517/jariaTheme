"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(C,e){function g(e){return null!=e&&e===e.window}var t=[],S=C.document,r=Object.getPrototypeOf,a=t.slice,y=t.concat,u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,s=v.toString,l=s.call(Object),m={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},c={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var r,i,o=(n=n||S).createElement("script");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+"":"object"===_typeof(e)||"function"==typeof e?n[o.call(e)]||"object":_typeof(e)}var f="3.4.1",k=function e(t,n){return new e.fn.init(t,n)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function d(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!b(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}k.fn=k.prototype={jquery:f,constructor:k,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(n){return this.pushStack(k.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},k.extend=k.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"===_typeof(s)||b(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)r=e[t],"__proto__"!==t&&s!==r&&(l&&r&&(k.isPlainObject(r)||(i=Array.isArray(r)))?(n=s[t],o=i&&!Array.isArray(n)?[]:i||k.isPlainObject(n)?n:{},i=!1,s[t]=k.extend(l,o,r)):void 0!==r&&(s[t]=r));return s},k.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=r(e))||"function"==typeof(n=v.call(t,"constructor")&&t.constructor)&&s.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){x(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(d(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(p,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?k.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,s=!n;i<o;i++)!t(e[i],i)!=s&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,s=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return y.apply([],s)},guid:1,support:m}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=t[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var h=function(n){function f(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(65536+r):String.fromCharCode(r>>10|55296,1023&r|56320)}function i(){T()}var e,d,x,o,s,h,p,g,w,u,l,T,C,a,S,y,c,v,m,k="sizzle"+1*new Date,b=n.document,E=0,r=0,j=ue(),F=ue(),A=ue(),N=ue(),D=function(e,t){return e===t&&(l=!0),0},O={}.hasOwnProperty,t=[],I=t.pop,L=t.push,q=t.push,H=t.slice,$=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",z="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+z+"*("+M+")(?:"+z+"*([*^$|!~]?=)"+z+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+z+"*\\]",_=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",W=new RegExp(z+"+","g"),B=new RegExp("^"+z+"+|((?:^|[^\\\\])(?:\\\\.)*)"+z+"+$","g"),U=new RegExp("^"+z+"*,"+z+"*"),X=new RegExp("^"+z+"*([>+~]|"+z+")"+z+"*"),G=new RegExp(z+"|>"),V=new RegExp(_),Q=new RegExp("^"+M+"$"),Y={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+_),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+z+"*(even|odd|(([+-]|)(\\d*)n|)"+z+"*(?:([+-]|)"+z+"*(\\d+)|))"+z+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+z+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+z+"*((?:-\\d)?\\d*)"+z+"*\\)|)(?=[^-]|$)","i")},J=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,re=new RegExp("\\\\([\\da-f]{1,6}"+z+"?|("+z+")|.)","ig"),ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=xe(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{q.apply(t=H.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){q={apply:t.length?function(e,t){L.apply(e,H.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ae(t,e,n,r){var i,o,s,a,u,l,c,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&((e?e.ownerDocument||e:b)!==C&&T(e),e=e||C,S)){if(11!==p&&(u=te.exec(t)))if(i=u[1]){if(9===p){if(!(s=e.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(f&&(s=f.getElementById(i))&&m(e,s)&&s.id===i)return n.push(s),n}else{if(u[2])return q.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&d.getElementsByClassName&&e.getElementsByClassName)return q.apply(n,e.getElementsByClassName(i)),n}if(d.qsa&&!N[t+" "]&&(!y||!y.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===p&&G.test(t)){for((a=e.getAttribute("id"))?a=a.replace(ie,oe):e.setAttribute("id",a=k),o=(l=h(t)).length;o--;)l[o]="#"+a+" "+be(l[o]);c=l.join(","),f=ne.test(t)&&ve(e.parentNode)||e}try{return q.apply(n,f.querySelectorAll(c)),n}catch(e){N(t,!0)}finally{a===k&&e.removeAttribute("id")}}}return g(t.replace(B,"$1"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+" ")>x.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function le(e){return e[k]=!0,e}function ce(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),r=n.length;r--;)x.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&se(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ye(s){return le(function(o){return o=+o,le(function(e,t){for(var n,r=s([],e.length,o),i=r.length;i--;)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in d=ae.support={},s=ae.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!J.test(t||n&&n.nodeName||"HTML")},T=ae.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:b;return r!==C&&9===r.nodeType&&r.documentElement&&(a=(C=r).documentElement,S=!s(C),b!==C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",i,!1):n.attachEvent&&n.attachEvent("onunload",i)),d.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),d.getElementsByTagName=ce(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),d.getElementsByClassName=ee.test(C.getElementsByClassName),d.getById=ce(function(e){return a.appendChild(e).id=k,!C.getElementsByName||!C.getElementsByName(k).length}),d.getById?(x.filter.ID=function(e){var t=e.replace(re,f);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&S){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(re,f);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&S){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),x.find.TAG=d.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):d.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;n=o[i++];)1===n.nodeType&&r.push(n);return r},x.find.CLASS=d.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&S)return t.getElementsByClassName(e)},c=[],y=[],(d.qsa=ee.test(C.querySelectorAll))&&(ce(function(e){a.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+z+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||y.push("\\["+z+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+k+"-]").length||y.push("~="),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||y.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+z+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")})),(d.matchesSelector=ee.test(v=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){d.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),c.push("!=",_)}),y=y.length&&new RegExp(y.join("|")),c=c.length&&new RegExp(c.join("|")),t=ee.test(a.compareDocumentPosition),m=t||ee.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!d.sortDetached&&t.compareDocumentPosition(e)===n?e===C||e.ownerDocument===b&&m(b,e)?-1:t===C||t.ownerDocument===b&&m(b,t)?1:u?$(u,e)-$(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!i||!o)return e===C?-1:t===C?1:i?-1:o?1:u?$(u,e)-$(u,t):0;if(i===o)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?pe(s[r],a[r]):s[r]===b?-1:a[r]===b?1:0}),C},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if((e.ownerDocument||e)!==C&&T(e),d.matchesSelector&&S&&!N[t+" "]&&(!c||!c.test(t))&&(!y||!y.test(t)))try{var n=v.call(e,t);if(n||d.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){N(t,!0)}return 0<ae(t,C,null,[e]).length},ae.contains=function(e,t){return(e.ownerDocument||e)!==C&&T(e),m(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!==C&&T(e);var n=x.attrHandle[t.toLowerCase()],r=n&&O.call(x.attrHandle,t.toLowerCase())?n(e,t,!S):void 0;return void 0!==r?r:d.attributes||!S?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},ae.escape=function(e){return(e+"").replace(ie,oe)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!d.detectDuplicates,u=!d.sortStable&&e.slice(0),e.sort(D),l){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return u=null,e},o=ae.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(x=ae.selectors={cacheLength:50,createPseudo:le,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(re,f),e[3]=(e[3]||e[4]||e[5]||"").replace(re,f),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(re,f).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=j[e+" "];return t||(t=new RegExp("(^|"+z+")"+e+"("+z+"|$)"))&&j(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=ae.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(W," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,y){var v="nth"!==h.slice(0,3),m="last"!==h.slice(-4),b="of-type"===e;return 1===g&&0===y?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,s,a,u,l=v!=m?"nextSibling":"previousSibling",c=e.parentNode,f=b&&e.nodeName.toLowerCase(),p=!n&&!b,d=!1;if(c){if(v){for(;l;){for(s=e;s=s[l];)if(b?s.nodeName.toLowerCase()===f:1===s.nodeType)return!1;u=l="only"===h&&!u&&"nextSibling"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&p){for(d=(a=(r=(i=(o=(s=c)[k]||(s[k]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]||[])[0]===E&&r[1])&&r[2],s=a&&c.childNodes[a];s=++a&&s&&s[l]||(d=a=0)||u.pop();)if(1===s.nodeType&&++d&&s===e){i[h]=[E,a,d];break}}else if(p&&(d=a=(r=(i=(o=(s=e)[k]||(s[k]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]||[])[0]===E&&r[1]),!1===d)for(;(s=++a&&s&&s[l]||(d=a=0)||u.pop())&&((b?s.nodeName.toLowerCase()!==f:1!==s.nodeType)||!++d||(p&&((i=(o=s[k]||(s[k]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]=[E,d]),s!==e)););return(d-=y)===g||d%g==0&&0<=d/g}}},PSEUDO:function(e,o){var t,s=x.pseudos[e]||x.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return s[k]?s(o):1<s.length?(t=[e,e,"",o],x.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){for(var n,r=s(e,o),i=r.length;i--;)e[n=$(e,r[i])]=!(t[n]=r[i])}):function(e){return s(e,0,t)}):s}},pseudos:{not:le(function(e){var r=[],i=[],a=p(e.replace(B,"$1"));return a[k]?le(function(e,t,n,r){for(var i,o=a(e,null,r,[]),s=e.length;s--;)(i=o[s])&&(e[s]=!(t[s]=i))}):function(e,t,n){return r[0]=e,a(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<ae(t,e).length}}),contains:le(function(t){return t=t.replace(re,f),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return Q.test(n||"")||ae.error("unsupported lang: "+n),n=n.replace(re,f).toLowerCase(),function(e){var t;do{if(t=S?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return Z.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ye(function(){return[0]}),last:ye(function(e,t){return[t-1]}),eq:ye(function(e,t,n){return[n<0?n+t:n]}),even:ye(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ye(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ye(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ye(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=de(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=he(e);function me(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function xe(a,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&"parentNode"===c,p=r++;return e.first?function(e,t,n){for(;e=e[u];)if(1===e.nodeType||f)return a(e,t,n);return!1}:function(e,t,n){var r,i,o,s=[E,p];if(n){for(;e=e[u];)if((1===e.nodeType||f)&&a(e,t,n))return!0}else for(;e=e[u];)if(1===e.nodeType||f)if(i=(o=e[k]||(e[k]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===E&&r[1]===p)return s[2]=r[2];if((i[c]=s)[2]=a(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){for(var r=i.length;r--;)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Te(e,t,n,r,i){for(var o,s=[],a=0,u=e.length,l=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),l&&t.push(a)));return s}function Ce(d,h,g,y,v,e){return y&&!y[k]&&(y=Ce(y)),v&&!v[k]&&(v=Ce(v,e)),le(function(e,t,n,r){var i,o,s,a=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)ae(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),f=!d||!e&&h?c:Te(c,a,d,n,r),p=g?v||(e?d:l||y)?[]:t:f;if(g&&g(f,p,n,r),y)for(i=Te(p,u),y(i,[],n,r),o=i.length;o--;)(s=i[o])&&(p[u[o]]=!(f[u[o]]=s));if(e){if(v||d){if(v){for(i=[],o=p.length;o--;)(s=p[o])&&i.push(f[o]=s);v(null,p=[],i,r)}for(o=p.length;o--;)(s=p[o])&&-1<(i=v?$(e,s):a[o])&&(e[i]=!(t[i]=s))}}else p=Te(p===t?p.splice(l,p.length):p),v?v(null,t,p,r):q.apply(t,p)})}function Se(e){for(var i,t,n,r=e.length,o=x.relative[e[0].type],s=o||x.relative[" "],a=o?1:0,u=xe(function(e){return e===i},s,!0),l=xe(function(e){return-1<$(i,e)},s,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];a<r;a++)if(t=x.relative[e[a].type])c=[xe(we(c),t)];else{if((t=x.filter[e[a].type].apply(null,e[a].matches))[k]){for(n=++a;n<r&&!x.relative[e[n].type];n++);return Ce(1<a&&we(c),1<a&&be(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(B,"$1"),t,a<n&&Se(e.slice(a,n)),n<r&&Se(e=e.slice(n)),n<r&&be(e))}c.push(t)}return we(c)}return me.prototype=x.filters=x.pseudos,x.setFilters=new me,h=ae.tokenize=function(e,t){var n,r,i,o,s,a,u,l=F[e+" "];if(l)return t?0:l.slice(0);for(s=e,a=[],u=x.preFilter;s;){for(o in n&&!(r=U.exec(s))||(r&&(s=s.slice(r[0].length)||s),a.push(i=[])),n=!1,(r=X.exec(s))&&(n=r.shift(),i.push({value:n,type:r[0].replace(B," ")}),s=s.slice(n.length)),x.filter)!(r=Y[o].exec(s))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?ae.error(e):F(e,a).slice(0)},p=ae.compile=function(e,t){var n,r=[],i=[],o=A[e+" "];if(!o){for(t||(t=h(e)),n=t.length;n--;)(o=Se(t[n]))[k]?r.push(o):i.push(o);(o=A(e,function(y,v){function e(e,t,n,r,i){var o,s,a,u=0,l="0",c=e&&[],f=[],p=w,d=e||b&&x.find.TAG("*",i),h=E+=null==p?1:Math.random()||.1,g=d.length;for(i&&(w=t===C||t||i);l!==g&&null!=(o=d[l]);l++){if(b&&o){for(s=0,t||o.ownerDocument===C||(T(o),n=!S);a=y[s++];)if(a(o,t||C,n)){r.push(o);break}i&&(E=h)}m&&((o=!a&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){for(s=0;a=v[s++];)a(c,f,t,n);if(e){if(0<u)for(;l--;)c[l]||f[l]||(f[l]=I.call(r));f=Te(f)}q.apply(r,f),i&&!e&&0<f.length&&1<u+v.length&&ae.uniqueSort(r)}return i&&(E=h,w=p),c}var m=0<v.length,b=0<y.length;return m?le(e):e}(i,r))).selector=e}return o},g=ae.select=function(e,t,n,r){var i,o,s,a,u,l="function"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(s=o[0]).type&&9===t.nodeType&&S&&x.relative[o[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(re,f),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=Y.needsContext.test(e)?0:o.length;i--&&(s=o[i],!x.relative[a=s.type]);)if((u=x.find[a])&&(r=u(s.matches[0].replace(re,f),ne.test(o[0].type)&&ve(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&be(o)))return q.apply(n,r),n;break}}return(l||p(e,c))(r,t,!S,n,!t||ne.test(e)&&ve(t.parentNode)||t),n},d.sortStable=k.split("").sort(D).join("")===k,d.detectDuplicates=!!l,T(),d.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),d.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||fe(P,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),ae}(C);k.find=h,k.expr=h.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=h.uniqueSort,k.text=h.getText,k.isXMLDoc=h.isXML,k.contains=h.contains,k.escapeSelector=h.escape;function T(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&k(e).is(n))break;r.push(e)}return r}function E(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var j=k.expr.match.needsContext;function F(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(e,n,r){return b(n)?k.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?k.grep(e,function(e){return e===n!==r}):"string"!=typeof n?k.grep(e,function(e){return-1<i.call(n,e)!==r}):k.filter(n,e,r)}k.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?k.find.matchesSelector(r,e)?[r]:[]:k.find.matches(e,k.grep(t,function(e){return 1===e.nodeType}))},k.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(k(e).filter(function(){for(t=0;t<r;t++)if(k.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)k.find(e,i[t],n);return 1<r?k.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&j.test(e)?k(e):e||[],!1).length}});var D,O=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||D,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this);if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:O.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:S,!0)),A.test(r[1])&&k.isPlainObject(t))for(r in t)b(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=S.getElementById(r[2]))&&(this[0]=i,this.length=1),this}).prototype=k.fn,D=k(S);var I=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function q(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&k(e);if(!j.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&k.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?k.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(k(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return q(e,"nextSibling")},prev:function(e){return q(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return E((e.parentNode||{}).firstChild,e)},children:function(e){return E(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(F(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},function(r,i){k.fn[r]=function(e,t){var n=k.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=k.filter(t,n)),1<this.length&&(L[r]||k.uniqueSort(n),I.test(r)&&n.reverse()),this.pushStack(n)}});var H=/[^\x20\t\r\n\f]+/g;function $(e){return e}function P(e){throw e}function z(e,t,n,r){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(n):e&&b(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(r){r="string"==typeof r?function(e){var n={};return k.each(e.match(H)||[],function(e,t){n[t]=!0}),n}(r):k.extend({},r);function n(){for(o=o||r.once,t=i=!0;a.length;u=-1)for(e=a.shift();++u<s.length;)!1===s[u].apply(e[0],e[1])&&r.stopOnFalse&&(u=s.length,e=!1);r.memory||(e=!1),i=!1,o&&(s=e?[]:"")}var i,e,t,o,s=[],a=[],u=-1,l={add:function(){return s&&(e&&!i&&(u=s.length-1,a.push(e)),function n(e){k.each(e,function(e,t){b(t)?r.unique&&l.has(t)||s.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),e&&!i&&n()),this},remove:function(){return k.each(arguments,function(e,t){for(var n;-1<(n=k.inArray(t,s,n));)s.splice(n,1),n<=u&&u--}),this},has:function(e){return e?-1<k.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return o=a=[],s=e="",this},disabled:function(){return!s},lock:function(){return o=a=[],e||i||(s=e=""),this},locked:function(){return!!o},fireWith:function(e,t){return o||(t=[e,(t=t||[]).slice?t.slice():t],a.push(t),i||n()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!t}};return l},k.extend({Deferred:function(e){var o=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],i="pending",s={state:function(){return i},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var i=arguments;return k.Deferred(function(r){k.each(o,function(e,t){var n=b(i[t[4]])&&i[t[4]];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,s,a){return function(){function e(){var e,t;if(!(i<u)){if((e=s.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"===_typeof(e)||"function"==typeof e)&&e.then,b(t)?a?t.call(e,l(u,o,$,a),l(u,o,P,a)):(u++,t.call(e,l(u,o,$,a),l(u,o,P,a),l(u,o,$,o.notifyWith))):(s!==$&&(n=void 0,r=[e]),(a||o.resolveWith)(n,r))}}var n=this,r=arguments,t=a?e:function(){try{e()}catch(e){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(s!==P&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(k.Deferred.getStackHook&&(t.stackTrace=k.Deferred.getStackHook()),C.setTimeout(t))}}return k.Deferred(function(e){o[0][3].add(l(0,e,b(r)?r:$,e.notifyWith)),o[1][3].add(l(0,e,b(t)?t:$)),o[2][3].add(l(0,e,b(n)?n:P))}).promise()},promise:function(e){return null!=e?k.extend(e,s):s}},a={};return k.each(o,function(e,t){var n=t[2],r=t[5];s[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){i[t]=this,o[t]=1<arguments.length?a.call(arguments):e,--n||s.resolveWith(i,o)}}var n=arguments.length,r=n,i=Array(r),o=a.call(arguments),s=k.Deferred();if(n<=1&&(z(e,s.done(t(r)).resolve,s.reject,!n),"pending"===s.state()||b(o[r]&&o[r].then)))return s.then();for(;r--;)z(o[r],t(r),s.reject);return s.promise()}});var M=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&M.test(e.name)&&C.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){C.setTimeout(function(){throw e})};var R=k.Deferred();function _(){S.removeEventListener("DOMContentLoaded",_),C.removeEventListener("load",_),k.ready()}k.fn.ready=function(e){return R.then(e).catch(function(e){k.readyException(e)}),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0)!==e&&0<--k.readyWait||R.resolveWith(S,[k])}}),k.ready.then=R.then,"complete"===S.readyState||"loading"!==S.readyState&&!S.documentElement.doScroll?C.setTimeout(k.ready):(S.addEventListener("DOMContentLoaded",_),C.addEventListener("load",_));function W(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if("object"===w(n))for(a in i=!0,n)W(e,t,a,n[a],!0,o,s);else if(void 0!==r&&(i=!0,b(r)||(s=!0),l&&(t=s?(t.call(e,r),null):(l=t,function(e,t,n){return l.call(k(e),n)})),t))for(;a<u;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o}var B=/^-ms-/,U=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function G(e){return e.replace(B,"ms-").replace(U,X)}function V(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function Q(){this.expando=k.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[G(t)]=n;else for(r in t)i[G(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(H)||[]).length;for(;n--;)delete r[t[n]]}void 0!==t&&!k.isEmptyObject(r)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var Y=new Q,J=new Q,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function ee(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:K.test(e)?JSON.parse(e):e)}(n)}catch(e){}J.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return J.hasData(e)||Y.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),k.fn.extend({data:function(n,e){var t,r,i,o=this[0],s=o&&o.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){J.set(this,n)}):W(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=J.get(o,n))?t:void 0!==(t=ee(o,n))?t:void 0;this.each(function(){J.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(i=J.get(o),1===o.nodeType&&!Y.get(o,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(r=s[t].name).indexOf("data-")&&(r=G(r.slice(5)),ee(o,r,i[r]));Y.set(o,"hasDataAttrs",!0)}return i},removeData:function(e){return this.each(function(){J.remove(this,e)})}}),k.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Y.get(e,t),n&&(!r||Array.isArray(n)?r=Y.access(e,t,k.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),r=n.length,i=n.shift(),o=k._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){k.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Y.get(e,n)||Y.access(e,n,{empty:k.Callbacks("once memory").add(function(){Y.remove(e,[t+"queue",n])})})}}),k.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?k.queue(this[0],t):void 0===n?this:this.each(function(){var e=k.queue(this,t,n);k._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&k.dequeue(this,t)})},dequeue:function(e){return this.each(function(){k.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--i||o.resolveWith(s,[s])}var r,i=1,o=k.Deferred(),s=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(r=Y.get(s[a],e+"queueHooks"))&&r.empty&&(i++,r.empty.add(n));return n(),o.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ne=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],ie=S.documentElement,oe=function(e){return k.contains(e.ownerDocument,e)},se={composed:!0};ie.getRootNode&&(oe=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});function ae(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=s[o];return i}var ue=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===k.css(e,"display")};function le(e,t,n,r){var i,o,s=20,a=r?function(){return r.cur()}:function(){return k.css(e,t,"")},u=a(),l=n&&n[3]||(k.cssNumber[t]?"":"px"),c=e.nodeType&&(k.cssNumber[t]||"px"!==l&&+u)&&ne.exec(k.css(e,t));if(c&&c[3]!==l){for(u/=2,l=l||c[3],c=+u||1;s--;)k.style(e,t,c+l),(1-o)*(1-(o=a()/u||.5))<=0&&(s=0),c/=o;c*=2,k.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ce={};function fe(e,t){for(var n,r,i,o,s,a,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(l[c]=Y.get(r,"display")||null,l[c]||(r.style.display="")),""===r.style.display&&ue(r)&&(l[c]=(u=s=o=void 0,s=(i=r).ownerDocument,a=i.nodeName,(u=ce[a])||(o=s.body.appendChild(s.createElement(a)),u=k.css(o,"display"),o.parentNode.removeChild(o),"none"===u&&(u="block"),ce[a]=u)))):"none"!==n&&(l[c]="none",Y.set(r,"display",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}k.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ue(this)?k(this).show():k(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ye(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&F(e,t)?k.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)Y.set(e[n],"globalEval",!t||Y.get(t[n],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var me,be,xe=/<|&#?\w+;/;function we(e,t,n,r,i){for(var o,s,a,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===w(o))k.merge(p,o.nodeType?[o]:o);else if(xe.test(o)){for(s=s||f.appendChild(t.createElement("div")),a=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[a]||ge._default,s.innerHTML=u[1]+k.htmlPrefilter(o)+u[2],c=u[0];c--;)s=s.lastChild;k.merge(p,s.childNodes),(s=f.firstChild).textContent=""}else p.push(t.createTextNode(o));for(f.textContent="",d=0;o=p[d++];)if(r&&-1<k.inArray(o,r))i&&i.push(o);else if(l=oe(o),s=ye(f.appendChild(o),"script"),l&&ve(s),n)for(c=0;o=s[c++];)he.test(o.type||"")&&n.push(o);return f}me=S.createDocumentFragment().appendChild(S.createElement("div")),(be=S.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),me.appendChild(be),m.checkClone=me.cloneNode(!0).cloneNode(!0).lastChild.checked,me.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!me.cloneNode(!0).lastChild.defaultValue;var Te=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Se=/^([^.]*)(?:\.(.+)|)/;function ke(){return!0}function Ee(){return!1}function je(e,t){return e===function(){try{return S.activeElement}catch(e){}}()==("focus"===t)}function Fe(e,t,n,r,i,o){var s,a;if("object"===_typeof(t)){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)Fe(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ee;else if(!i)return e;return 1===o&&(s=i,(i=function(e){return k().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=k.guid++)),e.each(function(){k.event.add(this,t,i,r,n)})}function Ae(e,i,o){o?(Y.set(e,i,!1),k.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Y.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(k.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=a.call(arguments),Y.set(this,i,r),t=o(this,i),this[i](),r!==(n=Y.get(this,i))||t?Y.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else r.length&&(Y.set(this,i,{value:k.event.trigger(k.extend(r[0],k.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,i)&&k.event.add(e,i,ke)}k.event={global:{},add:function(t,e,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,y=Y.get(t);if(y)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&k.find.matchesSelector(ie,i),n.guid||(n.guid=k.guid++),(u=y.events)||(u=y.events={}),(s=y.handle)||(s=y.handle=function(e){return void 0!==k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(H)||[""]).length;l--;)d=g=(a=Se.exec(e[l])||[])[1],h=(a[2]||"").split(".").sort(),d&&(f=k.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=k.event.special[d]||{},c=k.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&k.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,s)||t.addEventListener&&t.addEventListener(d,s)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),k.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,y=Y.hasData(e)&&Y.get(e);if(y&&(u=y.events)){for(l=(t=(t||"").match(H)||[""]).length;l--;)if(d=g=(a=Se.exec(t[l])||[])[1],h=(a[2]||"").split(".").sort(),d){for(f=k.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));s&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,y.handle)||k.removeEvent(e,d,y.handle),delete u[d])}else for(d in u)k.event.remove(e,d+t[l],n,r,!0);k.isEmptyObject(u)&&Y.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s,a=k.event.fix(e),u=new Array(arguments.length),l=(Y.get(this,"events")||{})[a.type]||[],c=k.event.special[a.type]||{};for(u[0]=a,t=1;t<arguments.length;t++)u[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=k.event.handlers.call(this,a,l),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==o.namespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(r=((k.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,i,o,s,a=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],s={},n=0;n<u;n++)void 0===s[i=(r=t[n]).selector+" "]&&(s[i]=r.needsContext?-1<k(i,this).index(l):k.find(i,this,null,[l]).length),s[i]&&o.push(r);o.length&&a.push({elem:l,handlers:o})}return l=this,u<t.length&&a.push({elem:l,handlers:t.slice(u)}),a},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&F(t,"input")&&Ae(t,"click",ke),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&F(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&F(t,"input")&&Y.get(t,"click")||F(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ke:Ee,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ke,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ke,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ke,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},function(e,t){k.event.special[e]={setup:function(){return Ae(this,e,je),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}}),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){k.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||k.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),k.fn.extend({on:function(e,t,n,r){return Fe(this,e,t,n,r)},one:function(e,t,n,r){return Fe(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,k(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"!==_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ee),this.each(function(){k.event.remove(this,e,n,t)});for(i in e)this.off(i,t,e[i]);return this}});var Ne=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,De=/<script|<style|<link/i,Oe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Le(e,t){return F(e,"table")&&F(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function qe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function He(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function $e(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(Y.hasData(e)&&(o=Y.access(e),s=Y.set(t,o),l=o.events))for(i in delete s.handle,s.events={},l)for(n=0,r=l[i].length;n<r;n++)k.event.add(t,i,l[i][n]);J.hasData(e)&&(a=J.access(e),u=k.extend({},a),J.set(t,u))}}function Pe(n,r,i,o){r=y.apply([],r);var e,t,s,a,u,l,c=0,f=n.length,p=f-1,d=r[0],h=b(d);if(h||1<f&&"string"==typeof d&&!m.checkClone&&Oe.test(d))return n.each(function(e){var t=n.eq(e);h&&(r[0]=d.call(this,e,t.html())),Pe(t,r,i,o)});if(f&&(t=(e=we(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(a=(s=k.map(ye(e,"script"),qe)).length;c<f;c++)u=e,c!==p&&(u=k.clone(u,!0,!0),a&&k.merge(s,ye(u,"script"))),i.call(n[c],u,c);if(a)for(l=s[s.length-1].ownerDocument,k.map(s,He),c=0;c<a;c++)u=s[c],he.test(u.type||"")&&!Y.access(u,"globalEval")&&k.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?k._evalUrl&&!u.noModule&&k._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):x(u.textContent.replace(Ie,""),u,l))}return n}function ze(e,t,n){for(var r,i=t?k.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||k.cleanData(ye(r)),r.parentNode&&(n&&oe(r)&&ve(ye(r,"script")),r.parentNode.removeChild(r));return e}k.extend({htmlPrefilter:function(e){return e.replace(Ne,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a,u,l,c=e.cloneNode(!0),f=oe(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(s=ye(c),r=0,i=(o=ye(e)).length;r<i;r++)a=o[r],u=s[r],void 0,"input"===(l=u.nodeName.toLowerCase())&&pe.test(a.type)?u.checked=a.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=a.defaultValue);if(t)if(n)for(o=o||ye(e),s=s||ye(c),r=0,i=o.length;r<i;r++)$e(o[r],s[r]);else $e(e,c);return 0<(s=ye(c,"script")).length&&ve(s,!f&&ye(e,"script")),c},cleanData:function(e){for(var t,n,r,i=k.event.special,o=0;void 0!==(n=e[o]);o++)if(V(n)){if(t=n[Y.expando]){if(t.events)for(r in t.events)i[r]?k.event.remove(n,r):k.removeEvent(n,r,t.handle);n[Y.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),k.fn.extend({detach:function(e){return ze(this,e,!0)},remove:function(e){return ze(this,e)},text:function(e){return W(this,function(e){return void 0===e?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Pe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return Pe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Pe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Pe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(ye(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return k.clone(this,e,t)})},html:function(e){return W(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!De.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(ye(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Pe(this,arguments,function(e){var t=this.parentNode;k.inArray(this,n)<0&&(k.cleanData(ye(this)),t&&t.replaceChild(e,this))},n)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){k.fn[e]=function(e){for(var t,n=[],r=k(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),k(r[o])[s](t),u.apply(n,t.get());return this.pushStack(n)}});var Me,Re,_e,We,Be,Ue,Xe,Ge=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Ve=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},Qe=new RegExp(re.join("|"),"i");function Ye(){if(Xe){Ue.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(Ue).appendChild(Xe);var e=C.getComputedStyle(Xe);Me="1%"!==e.top,Be=12===Je(e.marginLeft),Xe.style.right="60%",We=36===Je(e.right),Re=36===Je(e.width),Xe.style.position="absolute",_e=12===Je(Xe.offsetWidth/3),ie.removeChild(Ue),Xe=null}}function Je(e){return Math.round(parseFloat(e))}function Ke(e,t,n){var r,i,o,s,a=e.style;return(n=n||Ve(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||oe(e)||(s=k.style(e,t)),!m.pixelBoxStyles()&&Ge.test(s)&&Qe.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function Ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Ue=S.createElement("div"),(Xe=S.createElement("div")).style&&(Xe.style.backgroundClip="content-box",Xe.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===Xe.style.backgroundClip,k.extend(m,{boxSizingReliable:function(){return Ye(),Re},pixelBoxStyles:function(){return Ye(),We},pixelPosition:function(){return Ye(),Me},reliableMarginLeft:function(){return Ye(),Be},scrollboxSize:function(){return Ye(),_e}}));var et=["Webkit","Moz","ms"],tt=S.createElement("div").style,nt={};function rt(e){var t=k.cssProps[e]||nt[e];return t||(e in tt?e:nt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=et.length;n--;)if((e=et[n]+t)in tt)return e}(e)||e)}var it=/^(none|table(?!-c[ea]).+)/,ot=/^--/,st={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function ut(e,t,n){var r=ne.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function lt(e,t,n,r,i,o){var s="width"===t?1:0,a=0,u=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(u+=k.css(e,n+re[s],!0,i)),r?("content"===n&&(u-=k.css(e,"padding"+re[s],!0,i)),"margin"!==n&&(u-=k.css(e,"border"+re[s]+"Width",!0,i))):(u+=k.css(e,"padding"+re[s],!0,i),"padding"!==n?u+=k.css(e,"border"+re[s]+"Width",!0,i):a+=k.css(e,"border"+re[s]+"Width",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-a-.5))||0),u}function ct(e,t,n){var r=Ve(e),i=(!m.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,r),o=i,s=Ke(e,t,r),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ge.test(s)){if(!n)return s;s="auto"}return(!m.boxSizingReliable()&&i||"auto"===s||!parseFloat(s)&&"inline"===k.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===k.css(e,"boxSizing",!1,r),(o=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+lt(e,t,n||(i?"border":"content"),o,r,s)+"px"}function ft(e,t,n,r,i){return new ft.prototype.init(e,t,n,r,i)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ke(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=G(t),u=ot.test(t),l=e.style;if(u||(t=rt(a)),s=k.cssHooks[t]||k.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:l[t];"string"===(o=_typeof(n))&&(i=ne.exec(n))&&i[1]&&(n=le(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(k.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,s,a=G(t);return ot.test(t)||(t=rt(a)),(s=k.cssHooks[t]||k.cssHooks[a])&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=Ke(e,t,r)),"normal"===i&&t in at&&(i=at[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),k.each(["height","width"],function(e,u){k.cssHooks[u]={get:function(e,t,n){if(t)return!it.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,u,n):ae(e,st,function(){return ct(e,u,n)})},set:function(e,t,n){var r,i=Ve(e),o=!m.scrollboxSize()&&"absolute"===i.position,s=(o||n)&&"border-box"===k.css(e,"boxSizing",!1,i),a=n?lt(e,u,n,s,i):0;return s&&o&&(a-=Math.ceil(e["offset"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-lt(e,u,"border",!1,i)-.5)),a&&(r=ne.exec(t))&&"px"!==(r[3]||"px")&&(e.style[u]=t,t=k.css(e,u)),ut(0,t,a)}}}),k.cssHooks.marginLeft=Ze(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ke(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(i,o){k.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+re[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(k.cssHooks[i+o].set=ut)}),k.fn.extend({css:function(e,t){return W(this,function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=Ve(e),i=t.length;s<i;s++)o[t[s]]=k.css(e,t[s],!1,r);return o}return void 0!==n?k.style(e,t,n):k.css(e,t)},e,t,1<arguments.length)}}),((k.Tween=ft).prototype={constructor:ft,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(k.cssNumber[n]?"":"px")},cur:function(){var e=ft.propHooks[this.prop];return e&&e.get?e.get(this):ft.propHooks._default.get(this)},run:function(e){var t,n=ft.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ft.propHooks._default.set(this),this}}).init.prototype=ft.prototype,(ft.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[rt(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=ft.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=ft.prototype.init,k.fx.step={};var pt,dt,ht,gt,yt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;function mt(){dt&&(!1===S.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(mt):C.setTimeout(mt,k.fx.interval),k.fx.tick())}function bt(){return C.setTimeout(function(){pt=void 0}),pt=Date.now()}function xt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=re[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function wt(e,t,n){for(var r,i=(Tt.tweeners[t]||[]).concat(Tt.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function Tt(o,e,t){var n,s,r=0,i=Tt.prefilters.length,a=k.Deferred().always(function(){delete u.elem}),u=function(){if(s)return!1;for(var e=pt||bt(),t=Math.max(0,l.startTime+l.duration-e),n=1-(t/l.duration||0),r=0,i=l.tweens.length;r<i;r++)l.tweens[r].run(n);return a.notifyWith(o,[l,n,t]),n<1&&i?t:(i||a.notifyWith(o,[l,1,0]),a.resolveWith(o,[l]),!1)},l=a.promise({elem:o,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},t),originalProperties:e,originalOptions:t,startTime:pt||bt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=k.Tween(o,l.opts,e,t,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(n),n},stop:function(e){var t=0,n=e?l.tweens.length:0;if(s)return this;for(s=!0;t<n;t++)l.tweens[t].run(1);return e?(a.notifyWith(o,[l,1,0]),a.resolveWith(o,[l,e])):a.rejectWith(o,[l,e]),this}}),c=l.props;for(!function(e,t){var n,r,i,o,s;for(n in e)if(i=t[r=G(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(s=k.cssHooks[r])&&"expand"in s)for(n in o=s.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);r<i;r++)if(n=Tt.prefilters[r].call(l,o,c,l.opts))return b(n.stop)&&(k._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return k.map(c,wt,l),b(l.opts.start)&&l.opts.start.call(o,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),k.fx.timer(k.extend(u,{elem:o,anim:l,queue:l.opts.queue})),l}k.Animation=k.extend(Tt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ne.exec(t),n),n}]},tweener:function(e,t){for(var n,r=0,i=(e=b(e)?(t=e,["*"]):e.match(H)).length;r<i;r++)n=e[r],Tt.tweeners[n]=Tt.tweeners[n]||[],Tt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,s,a,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&ue(e),y=Y.get(e,"fxshow");for(r in n.queue||(null==(s=k._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,k.queue(e,"fx").length||s.empty.fire()})})),t)if(i=t[r],yt.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!y||void 0===y[r])continue;g=!0}d[r]=y&&y[r]||k.style(e,r)}if((u=!k.isEmptyObject(t))||!k.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=y&&y.display)&&(l=Y.get(e,"display")),"none"===(c=k.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=k.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===k.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(y?"hidden"in y&&(g=y.hidden):y=Y.access(e,"fxshow",{display:l}),o&&(y.hidden=!g),g&&fe([e],!0),p.done(function(){for(r in g||fe([e]),Y.remove(e,"fxshow"),d)k.style(e,r,d[r])})),u=wt(g?y[r]:0,r,p),r in y||(y[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?Tt.prefilters.unshift(e):Tt.prefilters.push(e)}}),k.speed=function(e,t,n){var r=e&&"object"===_typeof(e)?k.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return k.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in k.fx.speeds?r.duration=k.fx.speeds[r.duration]:r.duration=k.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){b(r.old)&&r.old.call(this),r.queue&&k.dequeue(this,r.queue)},r},k.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ue).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){function i(){var e=Tt(this,k.extend({},t),s);(o||Y.get(this,"finish"))&&e.stop(!0)}var o=k.isEmptyObject(t),s=k.speed(e,n,r);return i.finish=i,o||!1===s.queue?this.each(i):this.queue(s.queue,i)},stop:function(i,e,o){function s(e){var t=e.stop;delete e.stop,t(o)}return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&!1!==i&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=k.timers,r=Y.get(this);if(t)r[t]&&r[t].stop&&s(r[t]);else for(t in r)r[t]&&r[t].stop&&vt.test(t)&&s(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||k.dequeue(this,i)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=Y.get(this),n=t[s+"queue"],r=t[s+"queueHooks"],i=k.timers,o=n?n.length:0;for(t.finish=!0,k.queue(this,s,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===s&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),k.each(["toggle","show","hide"],function(e,r){var i=k.fn[r];k.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(xt(r,!0),e,t,n)}}),k.each({slideDown:xt("show"),slideUp:xt("hide"),slideToggle:xt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){k.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(pt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),pt=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){dt||(dt=!0,mt())},k.fx.stop=function(){dt=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(r,e){return r=k.fx&&k.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=C.setTimeout(e,r);t.stop=function(){C.clearTimeout(n)}})},ht=S.createElement("input"),gt=S.createElement("select").appendChild(S.createElement("option")),ht.type="checkbox",m.checkOn=""!==ht.value,m.optSelected=gt.selected,(ht=S.createElement("input")).value="t",ht.type="radio",m.radioValue="t"===ht.value;var Ct,St=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return W(this,k.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){k.removeAttr(this,e)})}}),k.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?k.prop(e,t,n):(1===o&&k.isXMLDoc(e)||(i=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?Ct:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=k.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&F(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(H);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),Ct={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(e,t){var s=St[t]||k.find.attr;St[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=St[o],St[o]=r,r=null!=s(e,t,n)?o:null,St[o]=i),r}});var kt=/^(?:input|select|textarea|button)$/i,Et=/^(?:a|area)$/i;function jt(e){return(e.match(H)||[]).join(" ")}function Ft(e){return e.getAttribute&&e.getAttribute("class")||""}function At(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(H)||[]}k.fn.extend({prop:function(e,t){return W(this,k.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[k.propFix[e]||e]})}}),k.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&k.isXMLDoc(e)||(t=k.propFix[t]||t,i=k.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):kt.test(e.nodeName)||Et.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var e,n,r,i,o,s,a,u=0;if(b(t))return this.each(function(e){k(this).addClass(t.call(this,e,Ft(this)))});if((e=At(t)).length)for(;n=this[u++];)if(i=Ft(n),r=1===n.nodeType&&" "+jt(i)+" "){for(s=0;o=e[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(a=jt(r))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,r,i,o,s,a,u=0;if(b(t))return this.each(function(e){k(this).removeClass(t.call(this,e,Ft(this)))});if(!arguments.length)return this.attr("class","");if((e=At(t)).length)for(;n=this[u++];)if(i=Ft(n),r=1===n.nodeType&&" "+jt(i)+" "){for(s=0;o=e[s++];)for(;-1<r.indexOf(" "+o+" ");)r=r.replace(" "+o+" "," ");i!==(a=jt(r))&&n.setAttribute("class",a)}return this},toggleClass:function(i,t){var o=_typeof(i),s="string"===o||Array.isArray(i);return"boolean"==typeof t&&s?t?this.addClass(i):this.removeClass(i):b(i)?this.each(function(e){k(this).toggleClass(i.call(this,e,Ft(this),t),t)}):this.each(function(){var e,t,n,r;if(s)for(t=0,n=k(this),r=At(i);e=r[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==i&&"boolean"!==o||((e=Ft(this))&&Y.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===i?"":Y.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&-1<(" "+jt(Ft(n))+" ").indexOf(t))return!0;return!1}});var Nt=/\r/g;k.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,k(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=k.map(t,function(e){return null==e?"":e+""})),(r=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=k.valHooks[t.type]||k.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Nt,""):null==e?"":e:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:jt(k.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],u=s?o+1:i.length;for(r=o<0?u:s?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!F(n.parentNode,"optgroup"))){if(t=k(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=k.makeArray(t),s=i.length;s--;)((r=i[s]).selected=-1<k.inArray(k.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<k.inArray(k(e).val(),t)}},m.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),m.focusin="onfocusin"in C;function Dt(e){e.stopPropagation()}var Ot=/^(?:focusinfocus|focusoutblur)$/;k.extend(k.event,{trigger:function(e,t,n,r){var i,o,s,a,u,l,c,f,p=[n||S],d=v.call(e,"type")?e.type:e,h=v.call(e,"namespace")?e.namespace.split("."):[];if(o=f=s=n=n||S,3!==n.nodeType&&8!==n.nodeType&&!Ot.test(d+k.event.triggered)&&(-1<d.indexOf(".")&&(d=(h=d.split(".")).shift(),h.sort()),u=d.indexOf(":")<0&&"on"+d,(e=e[k.expando]?e:new k.Event(d,"object"===_typeof(e)&&e)).isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:k.makeArray(t,[e]),c=k.event.special[d]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!g(n)){for(a=c.delegateType||d,Ot.test(a+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),s=o;s===(n.ownerDocument||S)&&p.push(s.defaultView||s.parentWindow||C)}for(i=0;(o=p[i++])&&!e.isPropagationStopped();)f=o,e.type=1<i?a:c.bindType||d,(l=(Y.get(o,"events")||{})[e.type]&&Y.get(o,"handle"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&V(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!V(n)||u&&b(n[d])&&!g(n)&&((s=n[u])&&(n[u]=null),k.event.triggered=d,e.isPropagationStopped()&&f.addEventListener(d,Dt),n[d](),e.isPropagationStopped()&&f.removeEventListener(d,Dt),k.event.triggered=void 0,s&&(n[u]=s)),e.result}},simulate:function(e,t,n){var r=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(r,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each(function(){k.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),m.focusin||k.each({focus:"focusin",blur:"focusout"},function(n,r){function i(e){k.event.simulate(r,e.target,k.event.fix(e))}k.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=Y.access(e,r);t||e.addEventListener(n,i,!0),Y.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=Y.access(e,r)-1;t?Y.access(e,r,t):(e.removeEventListener(n,i,!0),Y.remove(e,r))}}});var It=C.location,Lt=Date.now(),qt=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var Ht=/\[\]$/,$t=/\r?\n/g,Pt=/^(?:submit|button|image|reset|file)$/i,zt=/^(?:input|select|textarea|keygen)/i;function Mt(n,e,r,i){var t;if(Array.isArray(e))k.each(e,function(e,t){r||Ht.test(n)?i(n,t):Mt(n+"["+("object"===_typeof(t)&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==w(e))i(n,e);else for(t in e)Mt(n+"["+t+"]",e[t],r,i)}k.param=function(e,t){function n(e,t){var n=b(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var r,i=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,function(){n(this.name,this.value)});else for(r in e)Mt(r,e[r],t,n);return i.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&zt.test(this.nodeName)&&!Pt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(e){return{name:t.name,value:e.replace($t,"\r\n")}}):{name:t.name,value:n.replace($t,"\r\n")}}).get()}});var Rt=/%20/g,_t=/#.*$/,Wt=/([?&])_=[^&]*/,Bt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ut=/^(?:GET|HEAD)$/,Xt=/^\/\//,Gt={},Vt={},Qt="*/".concat("*"),Yt=S.createElement("a");function Jt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(H)||[];if(b(t))for(;n=i[r++];)"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Kt(t,i,o,s){var a={},u=t===Vt;function l(e){var r;return a[e]=!0,k.each(t[e]||[],function(e,t){var n=t(i,o,s);return"string"!=typeof n||u||a[n]?u?!(r=n):void 0:(i.dataTypes.unshift(n),l(n),!1)}),r}return l(i.dataTypes[0])||!a["*"]&&l("*")}function Zt(e,t){var n,r,i=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&k.extend(!0,e,r),e}Yt.href=It.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:It.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(It.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Zt(Zt(e,k.ajaxSettings),t):Zt(k.ajaxSettings,e)},ajaxPrefilter:Jt(Gt),ajaxTransport:Jt(Vt),ajax:function(e,t){"object"===_typeof(e)&&(t=e,e=void 0),t=t||{};var c,f,p,n,d,r,h,g,i,o,y=k.ajaxSetup({},t),v=y.context||y,m=y.context&&(v.nodeType||v.jquery)?k(v):k.event,b=k.Deferred(),x=k.Callbacks("once memory"),w=y.statusCode||{},s={},a={},u="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n)for(n={};t=Bt.exec(p);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=a[e.toLowerCase()]=a[e.toLowerCase()]||e,s[e]=t),this},overrideMimeType:function(e){return null==h&&(y.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),l(0,t),this}};if(b.promise(T),y.url=((e||y.url||It.href)+"").replace(Xt,It.protocol+"//"),y.type=t.method||t.type||y.method||y.type,y.dataTypes=(y.dataType||"*").toLowerCase().match(H)||[""],null==y.crossDomain){r=S.createElement("a");try{r.href=y.url,r.href=r.href,y.crossDomain=Yt.protocol+"//"+Yt.host!=r.protocol+"//"+r.host}catch(e){y.crossDomain=!0}}if(y.data&&y.processData&&"string"!=typeof y.data&&(y.data=k.param(y.data,y.traditional)),Kt(Gt,y,t,T),h)return T;for(i in(g=k.event&&y.global)&&0==k.active++&&k.event.trigger("ajaxStart"),y.type=y.type.toUpperCase(),y.hasContent=!Ut.test(y.type),f=y.url.replace(_t,""),y.hasContent?y.data&&y.processData&&0===(y.contentType||"").indexOf("application/x-www-form-urlencoded")&&(y.data=y.data.replace(Rt,"+")):(o=y.url.slice(f.length),y.data&&(y.processData||"string"==typeof y.data)&&(f+=(qt.test(f)?"&":"?")+y.data,delete y.data),!1===y.cache&&(f=f.replace(Wt,"$1"),o=(qt.test(f)?"&":"?")+"_="+Lt+++o),y.url=f+o),y.ifModified&&(k.lastModified[f]&&T.setRequestHeader("If-Modified-Since",k.lastModified[f]),k.etag[f]&&T.setRequestHeader("If-None-Match",k.etag[f])),(y.data&&y.hasContent&&!1!==y.contentType||t.contentType)&&T.setRequestHeader("Content-Type",y.contentType),T.setRequestHeader("Accept",y.dataTypes[0]&&y.accepts[y.dataTypes[0]]?y.accepts[y.dataTypes[0]]+("*"!==y.dataTypes[0]?", "+Qt+"; q=0.01":""):y.accepts["*"]),y.headers)T.setRequestHeader(i,y.headers[i]);if(y.beforeSend&&(!1===y.beforeSend.call(v,T,y)||h))return T.abort();if(u="abort",x.add(y.complete),T.done(y.success),T.fail(y.error),c=Kt(Vt,y,t,T)){if(T.readyState=1,g&&m.trigger("ajaxSend",[T,y]),h)return T;y.async&&0<y.timeout&&(d=C.setTimeout(function(){T.abort("timeout")},y.timeout));try{h=!1,c.send(s,l)}catch(e){if(h)throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,r){var i,o,s,a,u,l=t;h||(h=!0,d&&C.clearTimeout(d),c=void 0,p=r||"",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(a=function(e,t,n){for(var r,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}(y,T,n)),a=function(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=l[u+" "+o]||l["* "+o]))for(i in l)if((a=i.split(" "))[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){!0===s?s=l[i]:!0!==l[i]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(y,a,T,i),i?(y.ifModified&&((u=T.getResponseHeader("Last-Modified"))&&(k.lastModified[f]=u),(u=T.getResponseHeader("etag"))&&(k.etag[f]=u)),204===e||"HEAD"===y.type?l="nocontent":304===e?l="notmodified":(l=a.state,o=a.data,i=!(s=a.error))):(s=l,!e&&l||(l="error",e<0&&(e=0))),T.status=e,T.statusText=(t||l)+"",i?b.resolveWith(v,[o,l,T]):b.rejectWith(v,[T,l,s]),T.statusCode(w),w=void 0,g&&m.trigger(i?"ajaxSuccess":"ajaxError",[T,y,i?o:s]),x.fireWith(v,[T,l]),g&&(m.trigger("ajaxComplete",[T,y]),--k.active||k.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],function(e,i){k[i]=function(e,t,n,r){return b(t)&&(r=r||n,n=t,t=void 0),k.ajax(k.extend({url:e,type:i,dataType:r,data:t,success:n},k.isPlainObject(e)&&e))}}),k._evalUrl=function(e,t){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){k(this).wrapInner(n.call(this,e))}):this.each(function(){var e=k(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){k(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var en={0:200,1223:204},tn=k.ajaxSettings.xhr();m.cors=!!tn&&"withCredentials"in tn,m.ajax=tn=!!tn,k.ajaxTransport(function(i){var o,s;if(m.cors||tn&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=s=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(en[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),s=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=s:r.onreadystatechange=function(){4===r.readyState&&C.setTimeout(function(){o&&s()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),k.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),k.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=k("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),S.head.appendChild(r[0])},abort:function(){i&&i()}}});var nn,rn=[],on=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=rn.pop()||k.expando+"_"+Lt++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,s=!1!==e.jsonp&&(on.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&on.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(on,"$1"+r):!1!==e.jsonp&&(e.url+=(qt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||k.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=C[r],C[r]=function(){o=arguments},n.always(function(){void 0===i?k(C).removeProp(r):C[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,rn.push(r)),o&&b(i)&&i(o[0]),o=i=void 0}),"script"}),m.createHTMLDocument=((nn=S.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===nn.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=S.implementation.createHTMLDocument("")).createElement("base")).href=S.location.href,t.head.appendChild(r)):t=S),o=!n&&[],(i=A.exec(e))?[t.createElement(i[1])]:(i=we([e],t,o),o&&o.length&&k(o).remove(),k.merge([],i.childNodes)));var r,i,o},k.fn.load=function(e,t,n){var r,i,o,s=this,a=e.indexOf(" ");return-1<a&&(r=jt(e.slice(a)),e=e.slice(0,a)),b(t)?(n=t,t=void 0):t&&"object"===_typeof(t)&&(i="POST"),0<s.length&&k.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?k("<div>").append(k.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){k.fn[t]=function(e){return this.on(t,e)}}),k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(e){return t===e.elem}).length},k.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l=k.css(e,"position"),c=k(e),f={};"static"===l&&(e.style.position="relative"),a=c.offset(),o=k.css(e,"top"),u=k.css(e,"left"),i=("absolute"===l||"fixed"===l)&&-1<(o+u).indexOf("auto")?(s=(r=c.position()).top,r.left):(s=parseFloat(o)||0,parseFloat(u)||0),b(t)&&(t=t.call(e,n,k.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+i),"using"in t?t.using.call(e,f):c.css(f)}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){k.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===k.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),i.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-k.css(r,"marginTop",!0),left:t.left-i.left-k.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===k.css(e,"position");)e=e.offsetParent;return e||ie})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;k.fn[t]=function(e){return W(this,function(e,t,n){var r;if(g(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),k.each(["top","left"],function(e,n){k.cssHooks[n]=Ze(m.pixelPosition,function(e,t){if(t)return t=Ke(e,n),Ge.test(t)?k(e).position()[n]+"px":t})}),k.each({Height:"height",Width:"width"},function(s,a){k.each({padding:"inner"+s,content:a,"":"outer"+s},function(r,o){k.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return W(this,function(e,t,n){var r;return g(e)?0===o.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+s],r["scroll"+s],e.body["offset"+s],r["offset"+s],r["client"+s])):void 0===n?k.css(e,t,i):k.style(e,t,n,i)},a,n?e:void 0,n)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){k.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),k.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),k.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return r=a.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(a.call(arguments)))}).guid=e.guid=e.guid||k.guid++,i},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=F,k.isFunction=b,k.isWindow=g,k.camelCase=G,k.type=w,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return k});var sn=C.jQuery,an=C.$;return k.noConflict=function(e){return C.$===k&&(C.$=an),e&&C.jQuery===k&&(C.jQuery=sn),k},e||(C.jQuery=C.$=k),k}),function(n){function r(e){if(i[e])return i[e].exports;var t=i[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var i={};r.m=n,r.c=i,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=4)}([function(e,t,n){n.d(t,"b",function(){return r}),n.d(t,"h",function(){return o}),n.d(t,"i",function(){return i}),n.d(t,"g",function(){return s}),n.d(t,"e",function(){return a}),n.d(t,"j",function(){return u}),n.d(t,"f",function(){return l}),n.d(t,"k",function(){return c}),n.d(t,"c",function(){return f}),n.d(t,"d",function(){return d}),n.d(t,"l",function(){return h}),n.d(t,"a",function(){return g});var p="function"==typeof Symbol&&"symbol"==_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)},r=function(e,t){for(var n=0;n<e.length;n++){for(var r=!1,i=e[n],o=0;o<t.length;o++)i===t[o]&&(r=!0);if(!r)return!1}return!0},o=function(e){var t={};for(var n in e)t[n]=e[n];return t},i=function e(t,n){var r=o(n);for(var i in t)i in r?"object"!==p(r[i])||"object"!==p(t[i])||Array.isArray(t[i])||(r[i]=e("object"===p(r[i])?r[i]:{},t[i])):r[i]=t[i];return r},s=function(e,t){return Array.prototype.filter.call(e,function(e){return t.includes(e)})},a=function(n,r,i){var o=void 0;return function(){var e=this,t=arguments;clearTimeout(o),o=setTimeout(function(){o=null,i||n.apply(e,t)},r),i&&!o&&n.apply(e,t)}},u=function(e){for(var t=e.slice(0),n=[];0!==t.length;){var r=Math.floor(t.length*Math.random());n.push(t[r]),t.splice(r,1)}return n},l=function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n].props.index!==t[n].props.index)return!1;return!0},c=function(e,t){return e.slice(0).sort((i=t,function(e,t){var n=i(e),r=i(t);return n<r?-1:r<n?1:0}));var i},f=function(e,t,n,r,i){if(void 0!==t){var o=new Error('Filterizr: expected type of option "'+e+'" to be "'+n+'", but its type is: "'+(void 0===t?"undefined":p(t))+'"'),s=!1,a=!1,u=n.includes("array");if((void 0===t?"undefined":p(t)).match(n)?s=!0:!s&&u&&(a=Array.isArray(t)),!s&&!u)throw o;if(!s&&u&&!a)throw o;var l=function(e){return e?" For further help read here: "+e:""};if(Array.isArray(r)){var c=!1;if(r.forEach(function(e){e===t&&(c=!0)}),!c)throw new Error('Filterizr: allowed values for option "'+e+'" are: '+r.map(function(e){return'"'+e+'"'}).join(", ")+'. Value received: "'+t+'".'+l(i))}else if(r instanceof RegExp){var f=t.match(r);if(!f)throw new Error('Filterizr: invalid value "'+t+'" for option "'+e+'" received.'+l(i))}}},d=/(^linear$)|(^ease-in-out$)|(^ease-in$)|(^ease-out$)|(^ease$)|(^step-start$)|(^step-end$)|(^steps\(\d\s*,\s*(end|start)\))$|(^cubic-bezier\((\d*\.*\d+)\s*,\s*(\d*\.*\d+)\s*,\s*(\d*\.*\d+)\s*,\s*(\d*\.*\d+)\))$/,h="\n  webkitTransitionEnd.Filterizr \n  otransitionend.Filterizr \n  oTransitionEnd.Filterizr \n  msTransitionEnd.Filterizr \n  transitionend.Filterizr\n",g={IDLE:"IDLE",FILTERING:"FILTERING",SORTING:"SORTING",SHUFFLING:"SHUFFLING"}},function(e,t,n){var o=n(2),r=n(0),i=function(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),e},s=window.jQuery,a=(i(u,[{key:"destroy",value:function(){this.$node.attr("style","").find(".filtr-item").attr("style",""),this.unbindEvents()}},{key:"getFilterItems",value:function(n){return s.map(this.$node.find(".filtr-item"),function(e,t){return new o.a(s(e),t,n)})}},{key:"push",value:function(e,t){var n=this.props.FilterItems;this.$node.append(e);var r=n.length,i=new o.a(e,r,t);this.props.FilterItems.push(i)}},{key:"calcColumns",value:function(){return Math.round(this.props.w/this.props.FilterItems[0].props.w)}},{key:"updateFilterItemsTransitionStyle",value:function(t,n,r,i){this.props.FilterItems.forEach(function(e){return e.$node.css({transition:"all "+t+"s "+n+" "+e.calcDelay(r,i)+"ms"})})}},{key:"updateHeight",value:function(e){this.props.h=e,this.$node.css("height",e)}},{key:"updateWidth",value:function(){this.props.w=this.getWidth()}},{key:"updateFilterItemsDimensions",value:function(){this.props.FilterItems.forEach(function(e){return e.updateDimensions()})}},{key:"getWidth",value:function(){return this.$node.innerWidth()}},{key:"bindTransitionEnd",value:function(e,t){this.$node.on(r.l,Object(r.e)(function(){e()},t))}},{key:"bindEvents",value:function(e){this.$node.on("filteringStart.Filterizr",e.onFilteringStart),this.$node.on("filteringEnd.Filterizr",e.onFilteringEnd),this.$node.on("shufflingStart.Filterizr",e.onShufflingStart),this.$node.on("shufflingEnd.Filterizr",e.onShufflingEnd),this.$node.on("sortingStart.Filterizr",e.onSortingStart),this.$node.on("sortingEnd.Filterizr",e.onSortingEnd)}},{key:"unbindEvents",value:function(){this.$node.off(r.l+"\n      filteringStart.Filterizr \n      filteringEnd.Filterizr \n      shufflingStart.Filterizr \n      shufflingEnd.Filterizr \n      sortingStart.Filterizr \n      sortingEnd.Filterizr")}},{key:"trigger",value:function(e){this.$node.trigger(e)}}]),u);function u(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:".filtr-container",t=arguments[1];(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,u),this.$node=s(e),this.$node.css({padding:0,position:"relative",width:"100%",display:"flex","flex-wrap":"wrap"}),this.props={FilterItems:this.getFilterItems(t),w:this.getWidth(),h:0},this.updateFilterItemsDimensions()}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}t.a=a},function(e,t,n){var r=n(0),i=(function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}(c,[{key:"filterIn",value:function(e,t){var n=Object(r.h)(t);n.transform+=" translate3d("+e.left+"px,"+e.top+"px, 0)",this.$node.css(n),this.props.lastPosition=e,this.props.filteredOut=!1}},{key:"filterOut",value:function(e){var t=Object(r.h)(e),n=this.props.lastPosition;t.transform+=" translate3d("+n.left+"px,"+n.top+"px, 0)",this.$node.css(t),this.props.filteredOut=!0}},{key:"calcDelay",value:function(e,t){var n=0;return"progressive"===t?n=e*this.props.index:this.props.index%2==0&&(n=e),n}},{key:"contentsMatchSearch",value:function(e){return Boolean(this.getContentsLowercase().includes(e))}},{key:"getContentsLowercase",value:function(){return this.$node.text().toLowerCase()}},{key:"getCategories",value:function(){return this.$node.attr("data-category").split(/\s*,\s*/g)}},{key:"getHeight",value:function(){return this.$node.innerHeight()}},{key:"getWidth",value:function(){return this.$node.innerWidth()}},{key:"trigger",value:function(e){this.$node.trigger(e)}},{key:"updateDimensions",value:function(){this.props.w=this.getWidth(),this.props.h=this.getHeight()}},{key:"bindEvents",value:function(){var t=this;this.$node.on(r.l,function(){var e=t.props.filteredOut;t.$node.toggleClass("filteredOut",e),t.$node.css("z-index",e?-1e3:"")})}},{key:"unbindEvents",value:function(){this.$node.off(r.l)}}]),c);function c(e,t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var i,o=n.delay,s=n.delayMode,a=n.filterOutCss,u=n.animationDuration,l=n.easing;this.$node=e,this.props={data:(i=r.$node.data(),delete i.category,delete i.sort,i),index:t,sortData:this.$node.data("sort"),lastPosition:{left:0,top:0},filteredOut:!1,w:this.getWidth(),h:this.getHeight()},this.$node.css(a).css({"-webkit-backface-visibility":"hidden",perspective:"1000px","-webkit-perspective":"1000px","-webkit-transform-style":"preserve-3d",position:"absolute",transition:"all "+u+"s "+l+" "+this.calcDelay(o,s)+"ms"}),this.bindEvents()}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}t.a=i},function(e,t,n){t.a={animationDuration:.5,callbacks:{onFilteringStart:function(){},onFilteringEnd:function(){},onShufflingStart:function(){},onShufflingEnd:function(){},onSortingStart:function(){},onSortingEnd:function(){}},controlsSelector:"",delay:0,delayMode:"progressive",easing:"ease-out",filter:"all",filterOutCss:{opacity:0,transform:"scale(0.5)"},filterInCss:{opacity:1,transform:"scale(1)"},layout:"sameSize",multifilterLogicalOperator:"or",setupControls:!0}},function(e,t,n){e.exports=n(5)},function(e,t,n){function a(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}Object.defineProperty(t,"__esModule",{value:!0});var u=n(6),r=n(1),i=n(2),l=n(3),o=n(15);n.d(t,"Filterizr",function(){return u.a}),n.d(t,"FilterContainer",function(){return r.a}),n.d(t,"FilterItem",function(){return i.a}),n.d(t,"DefaultOptions",function(){return l.a});var s,c,f="function"==typeof Symbol&&"symbol"==_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)};s=c=window.jQuery,function(s){if(!s)throw new Error("Filterizr requires jQuery to work.");Object(o.a)(),s.fn.filterizr=function(){var e="."+s.trim(this.get(0).className).replace(/\s+/g,"."),t=arguments;if(!this._fltr&&0===t.length||1===t.length&&"object"===f(t[0])){var n=0<t.length?t[0]:l.a;this._fltr=new u.a(e,n)}else if(1<=t.length&&"string"==typeof t[0]){var r=t[0],i=Array.prototype.slice.call(t,1),o=this._fltr;switch(r){case"filter":return o.filter.apply(o,a(i)),this;case"insertItem":return o.insertItem.apply(o,a(i)),this;case"toggleFilter":return o.toggleFilter.apply(o,a(i)),this;case"sort":return o.sort.apply(o,a(i)),this;case"shuffle":return o.shuffle.apply(o,a(i)),this;case"search":return o.search.apply(o,a(i)),this;case"setOptions":return o.setOptions.apply(o,a(i)),this;case"destroy":return o.destroy.apply(o,a(i)),delete this._fltr,this;default:throw new Error("Filterizr: "+r+" is not part of the Filterizr API. Please refer to the docs for more information.")}}return this}}(c),t.default=s,n(16)},function(e,t,n){var r=n(7),i=n(1),l=n(8),o=n(3),c=n(0),s=function(e,t,n){return t&&p(e.prototype,t),n&&p(e,n),e},a=window.jQuery,u=(s(f,[{key:"filter",value:function(e){var t=this.props,n=t.searchTerm,r=t.FilterContainer,i=t.FilterItems;r.trigger("filteringStart"),this.props.filterizrState=c.a.FILTERING,e=Array.isArray(e)?e.map(function(e){return e.toString()}):e.toString();var o=this.searchFilterItems(this.filterFilterItems(i,e),n);this.props.FilteredItems=o,this.render(o)}},{key:"destroy",value:function(){var e=this.props.FilterContainer,t=this.options.controlsSelector;e.destroy(),a(window).off("resize.Filterizr"),a(t+"[data-filter]").off("click.Filterizr"),a(t+"[data-multifilter]").off("click.Filterizr"),a(t+"[data-shuffle]").off("click.Filterizr"),a(t+"[data-search]").off("keyup.Filterizr"),a(t+"[data-sortAsc]").off("click.Filterizr"),a(t+"[data-sortDesc]").off("click.Filterizr")}},{key:"insertItem",value:function(e){var t=this.props.FilterContainer,n=e.clone().attr("style","");t.push(n,this.options);var r=this.filterFilterItems(this.props.FilterItems,this.options.filter);this.render(r)}},{key:"sort",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"index",t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"asc",n=this.props,r=n.FilterContainer,i=n.FilterItems;r.trigger("sortingStart"),this.props.filterizrState=c.a.SORTING,this.props.FilterItems=this.sortFilterItems(i,e,t);var o=this.filterFilterItems(this.props.FilterItems,this.options.filter);this.props.FilteredItems=o,this.render(o)}},{key:"search",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.props.searchTerm,t=this.props.FilterItems,n=this.searchFilterItems(this.filterFilterItems(t,this.options.filter),e);this.props.FilteredItems=n,this.render(n)}},{key:"shuffle",value:function(){var e=this.props,t=e.FilterContainer,n=e.FilteredItems;t.trigger("shufflingStart"),this.props.filterizrState=c.a.SHUFFLING;var r=this.shuffleFilterItems(n);this.props.FilteredItems=r,this.render(r)}},{key:"setOptions",value:function(e){Object(c.c)("animationDuration",e.animationDuration,"number"),Object(c.c)("callbacks",e.callbacks,"object"),Object(c.c)("controlsSelector",e.controlsSelector,"string"),Object(c.c)("delay",e.delay,"number"),Object(c.c)("easing",e.easing,"string",c.d,"https://www.w3schools.com/cssref/css3_pr_transition-timing-function.asp"),Object(c.c)("delayMode",e.delayMode,"string",["progressive","alternate"]),Object(c.c)("filter",e.filter,"string|number|array"),Object(c.c)("filterOutCss",e.filterOutCss,"object"),Object(c.c)("filterInCss",e.filterOutCss,"object"),Object(c.c)("layout",e.layout,"string",["sameSize","vertical","horizontal","sameHeight","sameWidth","packed"]),Object(c.c)("multifilterLogicalOperator",e.multifilterLogicalOperator,"string",["and","or"]),Object(c.c)("setupControls",e.setupControls,"boolean"),this.options=Object(c.i)(this.options,e),(e.animationDuration||e.delay||e.delayMode||e.easing)&&this.props.FilterContainer.updateFilterItemsTransitionStyle(e.animationDuration,e.easing,e.delay,e.delayMode),(e.callbacks||e.animationDuration)&&this.rebindFilterContainerEvents(),e.filter&&this.filter(e.filter),e.multifilterLogicalOperator&&this.filter(this.options.filter)}},{key:"toggleFilter",value:function(t){var e=this.options.filter;"all"===e?e=t:Array.isArray(e)?e.includes(t)?1===(e=e.filter(function(e){return e!==t})).length&&(e=e[0]):e.push(t):e=e===t?"all":[e,t],this.options.filter=e,this.filter(this.options.filter)}},{key:"filterFilterItems",value:function(e,n){var r=this.options.multifilterLogicalOperator;return"all"===n?e:e.filter(function(e){var t=e.getCategories();return Array.isArray(n)?"or"===r?Object(c.g)(t,n).length:Object(c.b)(n,t):t.includes(n)})}},{key:"sortFilterItems",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"index",n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"asc",r=Object(c.k)(e,function(e){return"index"!==t&&"sortData"!==t?e.props.data[t]:e.props[t]});return"asc"===n?r:r.reverse()}},{key:"searchFilterItems",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.props.searchTerm;return t?e.filter(function(e){return e.contentsMatchSearch(t)}):e}},{key:"shuffleFilterItems",value:function(e){for(var t=Object(c.j)(e);1<e.length&&Object(c.f)(e,t);)t=Object(c.j)(e);return t}},{key:"render",value:function(e){var i=this,t=this.options,o=t.filter,n=t.filterInCss,r=t.filterOutCss,s=t.layout,a=t.multifilterLogicalOperator;this.props.FilterItems.filter(function(e){var t=e.getCategories(),n=Array.isArray(o),r=e.contentsMatchSearch(i.props.searchTerm);return!(n?"or"===a?Object(c.g)(t,o).length:Object(c.b)(o,t):t.includes(o))||!r}).forEach(function(e){e.filterOut(r)});var u=Object(l.a)(s,this);e.forEach(function(e,t){e.filterIn(u[t],n)})}},{key:"onTransitionEndCallback",value:function(){var e=this.props,t=e.filterizrState,n=e.FilterContainer;switch(t){case c.a.FILTERING:n.trigger("filteringEnd");break;case c.a.SORTING:n.trigger("sortingEnd");break;case c.a.SHUFFLING:n.trigger("shufflingEnd")}this.props.filterizrState=c.a.IDLE}},{key:"rebindFilterContainerEvents",value:function(){var e=this,t=this.props.FilterContainer,n=this.options,r=n.animationDuration,i=n.callbacks;t.unbindEvents(),t.bindEvents(i),t.bindTransitionEnd(function(){e.onTransitionEndCallback()},r)}},{key:"bindEvents",value:function(){var e=this,t=this.props.FilterContainer;this.rebindFilterContainerEvents(),a(window).on("resize.Filterizr",Object(c.e)(function(){t.updateWidth(),t.updateFilterItemsDimensions(),e.filter(e.options.filter)},250))}}]),f);function f(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:".filtr-container",t=arguments[1];(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,f),this.options=Object(c.i)(o.a,t);var n=new i.a(e,this.options);if(!n.$node.length)throw new Error("Filterizr: could not find a container with the selector "+e+", to initialize Filterizr.");new r.a(this,this.options.controlsSelector),this.props={filterizrState:c.a.IDLE,searchTerm:"",sort:"index",sortOrder:"asc",FilterContainer:n,FilterItems:n.props.FilterItems,FilteredItems:[]},this.bindEvents(),this.filter(this.options.filter)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}t.a=u},function(e,t,n){var r=n(0),i=function(e,t,n){return t&&u(e.prototype,t),n&&u(e,n),e},o=window.jQuery,s=(i(a,[{key:"setupFilterControls",value:function(){var e=this.props,n=e.Filterizr,t=e.selector;o(t+"[data-filter]").on("click.Filterizr",function(e){var t=o(e.currentTarget).attr("data-filter");n.options.filter=t,n.filter(n.options.filter)}),o(t+"[data-multifilter]").on("click.Filterizr",function(e){var t=o(e.target).attr("data-multifilter");n.toggleFilter(t)})}},{key:"setupShuffleControls",value:function(){var e=this.props,t=e.Filterizr,n=e.selector;o(n+"[data-shuffle]").on("click.Filterizr",function(){t.shuffle()})}},{key:"setupSearchControls",value:function(){var e=this.props,n=e.Filterizr,t=e.selector;o(t+"[data-search]").on("keyup.Filterizr",Object(r.e)(function(e){var t=o(e.target).val();n.props.searchTerm=t.toLowerCase(),n.search(n.props.searchTerm)},250))}},{key:"setupSortControls",value:function(){var e=this.props,t=e.Filterizr,n=e.selector;o(n+"[data-sortAsc]").on("click.Filterizr",function(){var e=o(n+"[data-sortOrder]").val();t.props.sortOrder="asc",t.sort(e,"asc")}),o(n+"[data-sortDesc]").on("click.Filterizr",function(){var e=o(n+"[data-sortOrder]").val();t.props.sortOrder="desc",t.sort(e,"desc")})}}]),a);function a(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"";(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,a),this.props={Filterizr:e,selector:t},this.setupFilterControls(),this.setupShuffleControls(),this.setupSearchControls(),this.setupSortControls()}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}t.a=s},function(e,t,n){var r=n(9),i=n(10),o=n(11),s=n(12),a=n(13),u=n(14);t.a=function(e,t){switch(e){case"horizontal":return Object(r.a)(t);case"vertical":return Object(i.a)(t);case"sameHeight":return Object(o.a)(t);case"sameWidth":return Object(s.a)(t);case"sameSize":return Object(a.a)(t);case"packed":return Object(u.a)(t);default:return Object(a.a)(t)}}},function(e,t,n){t.a=function(e){var t=e.props,n=t.FilterContainer,r=t.FilteredItems,o=0,s=0,i=r.map(function(e){var t=e.props,n=t.w,r=t.h,i={left:o,top:0};return o+=n,s<r&&(s=r),i});return n.updateHeight(s),i}},function(e,t,n){t.a=function(e){var t=e.props,n=t.FilterContainer,r=t.FilteredItems,i=0,o=r.map(function(e){var t=e.props.h,n={left:0,top:i};return i+=t,n});return n.updateHeight(i),o}},function(e,t,n){t.a=function(e){var t=e.props,n=t.FilterContainer,r=t.FilteredItems,i=n.props.w,o=r[0].props.h,s=0,a=0,u=r.map(function(e){var t=e.props.w;i<a+t&&(s++,a=0);var n={left:a,top:o*s};return a+=t,n});return n.updateHeight((s+1)*r[0].props.h),u}},function(e,t,n){var c=function(e,t,n){if(t<=0)return 0;var r=0;if(n<t-1)return 0;for(n-=t;0<=n;)r+=e[n].props.h,n-=t;return r};t.a=function(e){var t=e.props,n=t.FilterContainer,s=t.FilteredItems,a=n.calcColumns(),u=0,l=Array.apply(null,Array(a)).map(Number.prototype.valueOf,0),r=s.map(function(e,t){var n=e.props,r=n.w,i=n.h;t%a==0&&a<=t&&u++;var o=t-a*u;return l[o]+=i,{left:o*r,top:c(s,a,t)}});return n.updateHeight(Math.max.apply(Math,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(l))),r}},function(e,t,n){t.a=function(e){var t=e.props,n=t.FilterContainer,r=t.FilteredItems,i=n.calcColumns(),o=0,s=r.map(function(e,t){return t%i==0&&i<=t&&o++,{left:(t-i*o)*e.props.w,top:o*e.props.h}}),a=r[0]&&r[0].props.h||0;return n.updateHeight((o+1)*a),s}},function(e,t,n){var a=function(e){this.init(e)};a.prototype={init:function(e){this.root={x:0,y:0,w:e}},fit:function(e){var t,n,r,i=e.length,o=0<i?e[0].h:0;for(this.root.h=o,t=0;t<i;t++)r=e[t],(n=this.findNode(this.root,r.w,r.h))?r.fit=this.splitNode(n,r.w,r.h):r.fit=this.growDown(r.w,r.h)},findNode:function(e,t,n){return e.used?this.findNode(e.right,t,n)||this.findNode(e.down,t,n):t<=e.w&&n<=e.h?e:null},splitNode:function(e,t,n){return e.used=!0,e.down={x:e.x,y:e.y+n,w:e.w,h:e.h-n},e.right={x:e.x+t,y:e.y,w:e.w-t,h:n},e},growDown:function(e,t){var n;return this.root={used:!0,x:0,y:0,w:this.root.w,h:this.root.h+t,down:{x:0,y:this.root.h,w:this.root.w,h:t},right:this.root},(n=this.findNode(this.root,e,t))?this.splitNode(n,e,t):null}},t.a=function(e){var t=e.props,n=t.FilterContainer,r=t.FilteredItems,i=new a(n.props.w),o=r.map(function(e){var t=e.props;return{w:t.w,h:t.h}});i.fit(o);var s=o.map(function(e){var t=e.fit;return{left:t.x,top:t.y}});return n.updateHeight(i.root.h),s}},function(e,t,n){t.a=function(){String.prototype.includes||(String.prototype.includes=function(e,t){return"number"!=typeof t&&(t=0),!(t+e.length>this.length)&&-1!==this.indexOf(e,t)}),Array.prototype.includes||Object.defineProperty(Array.prototype,"includes",{value:function(e,t){if(null==this)throw new TypeError('"this" is null or not defined');var n,r,i=Object(this),o=i.length>>>0;if(0==o)return!1;for(var s=0|t,a=Math.max(0<=s?s:o-Math.abs(s),0);a<o;){if((n=i[a])===(r=e)||"number"==typeof n&&"number"==typeof r&&isNaN(n)&&isNaN(r))return!0;a++}return!1}})}},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsImpxdWVyeS5maWx0ZXJpenIubWluLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJfdHlwZW9mIiwiZXhwb3J0cyIsImRvY3VtZW50IiwidyIsIkVycm9yIiwid2luZG93Iiwibm9HbG9iYWwiLCJpc1dpbmRvdyIsIm9iaiIsImFyciIsImdldFByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImNvbmNhdCIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJjYWxsIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJub2RlVHlwZSIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJ0eXBlIiwic3JjIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwibm9kZSIsImRvYyIsImkiLCJ2YWwiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsInZlcnNpb24iLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJydHJpbSIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwidGhpcyIsImdldCIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImNhbGxiYWNrIiwibWFwIiwiZWxlbSIsImFwcGx5IiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsIm9wdGlvbnMiLCJuYW1lIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwicmVwbGFjZSIsImlzUmVhZHkiLCJlcnJvciIsIm1zZyIsIm5vb3AiLCJwcm90byIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsInRyaW0iLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJ2YWx1ZSIsImd1aWQiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJTaXp6bGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJzZXREb2N1bWVudCIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJwb3AiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwidG9TZWxlY3RvciIsImpvaW4iLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImtleSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImF0dHJJZCIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwidG1wIiwiaW5uZXJIVE1MIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwiPiIsIiAiLCIrIiwifiIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwicmVzdWx0Iiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJub3QiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaGFzIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbnMiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImJ5RWxlbWVudCIsImRpcnJ1bnNVbmlxdWUiLCJieVNldCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsInRva2VuIiwiY29tcGlsZWQiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsInJlYWR5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsInRhcmdldHMiLCJsIiwiY2xvc2VzdCIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkNhbGxiYWNrcyIsIm9iamVjdCIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyZSIsImxvY2tlZCIsIm9uY2UiLCJmaXJlZCIsImZpcmluZyIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJtZW1vcnkiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJtaWdodFRocm93IiwidGhhdCIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJ1cGRhdGVGdW5jIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInJlbWFpbmluZyIsIm1hc3RlciIsInJlcnJvck5hbWVzIiwic3RhY2siLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsInN3YXAiLCJvbGQiLCJzdHlsZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsImRpc3BsYXkiLCJjc3MiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiYm9keSIsImhpZGUiLCJ0b2dnbGUiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJ3cmFwTWFwIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImRpdiIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJhdHRhY2hlZCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsImV4cGVjdFN5bmMiLCJlcnIiLCJzYWZlQWN0aXZlRWxlbWVudCIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImxldmVyYWdlTmF0aXZlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsImRlbGVnYXRlVHlwZSIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwidHJpZ2dlciIsIkV2ZW50IiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsInQiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInBpeGVsUG9zaXRpb25WYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInNjcm9sbGJveFNpemVWYWwiLCJwaXhlbEJveFN0eWxlc1ZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsImNvbnRhaW5lciIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJyYm94U3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImNzc1RleHQiLCJkaXZTdHlsZSIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsIndpZHRoIiwicG9zaXRpb24iLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImZpbmFsIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImdyaWRBcmVhIiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3RhcnQiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTdGFydCIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJvcHQiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiYmluZCIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwiKiIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwiZG9BbmltYXRpb24iLCJvcHRhbGwiLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwiZ2V0dGVyIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJzIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsInRleHQgc2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsInIiLCJjIiwiZCIsIm8iLCJfX2VzTW9kdWxlIiwidSIsImYiLCJoIiwiaW5jbHVkZXMiLCJmbG9vciIsImZvckVhY2giLCJJRExFIiwiRklMVEVSSU5HIiwiU09SVElORyIsIlNIVUZGTElORyIsIiRub2RlIiwidW5iaW5kRXZlbnRzIiwiRmlsdGVySXRlbXMiLCJ0cmFuc2l0aW9uIiwiY2FsY0RlbGF5IiwiZ2V0V2lkdGgiLCJ1cGRhdGVEaW1lbnNpb25zIiwiaW5uZXJXaWR0aCIsIm9uRmlsdGVyaW5nU3RhcnQiLCJvbkZpbHRlcmluZ0VuZCIsIm9uU2h1ZmZsaW5nU3RhcnQiLCJvblNodWZmbGluZ0VuZCIsIm9uU29ydGluZ1N0YXJ0Iiwib25Tb3J0aW5nRW5kIiwiZmxleC13cmFwIiwiZ2V0RmlsdGVySXRlbXMiLCJ1cGRhdGVGaWx0ZXJJdGVtc0RpbWVuc2lvbnMiLCJ0cmFuc2Zvcm0iLCJsYXN0UG9zaXRpb24iLCJmaWx0ZXJlZE91dCIsIkJvb2xlYW4iLCJnZXRDb250ZW50c0xvd2VyY2FzZSIsImlubmVySGVpZ2h0IiwiZ2V0SGVpZ2h0IiwiZGVsYXlNb2RlIiwiZmlsdGVyT3V0Q3NzIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJjYXRlZ29yeSIsInNvcnREYXRhIiwiLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5IiwicGVyc3BlY3RpdmUiLCItd2Via2l0LXBlcnNwZWN0aXZlIiwiLXdlYmtpdC10cmFuc2Zvcm0tc3R5bGUiLCJiaW5kRXZlbnRzIiwiY2FsbGJhY2tzIiwiY29udHJvbHNTZWxlY3RvciIsImZpbHRlckluQ3NzIiwibGF5b3V0IiwibXVsdGlmaWx0ZXJMb2dpY2FsT3BlcmF0b3IiLCJzZXR1cENvbnRyb2xzIiwiZnJvbSIsImZpbHRlcml6ciIsIl9mbHRyIiwiaW5zZXJ0SXRlbSIsInRvZ2dsZUZpbHRlciIsInNodWZmbGUiLCJzZWFyY2giLCJzZXRPcHRpb25zIiwiZGVzdHJveSIsInNlYXJjaFRlcm0iLCJGaWx0ZXJDb250YWluZXIiLCJmaWx0ZXJpenJTdGF0ZSIsInNlYXJjaEZpbHRlckl0ZW1zIiwiZmlsdGVyRmlsdGVySXRlbXMiLCJGaWx0ZXJlZEl0ZW1zIiwicmVuZGVyIiwic29ydEZpbHRlckl0ZW1zIiwic2h1ZmZsZUZpbHRlckl0ZW1zIiwidXBkYXRlRmlsdGVySXRlbXNUcmFuc2l0aW9uU3R5bGUiLCJyZWJpbmRGaWx0ZXJDb250YWluZXJFdmVudHMiLCJnZXRDYXRlZ29yaWVzIiwiZyIsImsiLCJjb250ZW50c01hdGNoU2VhcmNoIiwiZmlsdGVyT3V0IiwiZmlsdGVySW4iLCJiaW5kVHJhbnNpdGlvbkVuZCIsIm9uVHJhbnNpdGlvbkVuZENhbGxiYWNrIiwidXBkYXRlV2lkdGgiLCJGaWx0ZXJpenIiLCJzZXR1cEZpbHRlckNvbnRyb2xzIiwic2V0dXBTaHVmZmxlQ29udHJvbHMiLCJzZXR1cFNlYXJjaENvbnRyb2xzIiwic2V0dXBTb3J0Q29udHJvbHMiLCJ1cGRhdGVIZWlnaHQiLCJjYWxjQ29sdW1ucyIsIk51bWJlciIsInZhbHVlT2YiLCJ4IiwieSIsImZpdCIsImZpbmROb2RlIiwic3BsaXROb2RlIiwiZ3Jvd0Rvd24iLCJ1c2VkIiwiZG93biIsImFicyJdLCJtYXBwaW5ncyI6ImdmQWFBLFNBQVlBLEVBQVFDLEdBSUksWUFBbEIsb0JBQU9DLE9BQVAsWUFBQUMsUUFBT0QsVUFBaUQsV0FBMUJDLFFBQU9ELE9BQU9FLFNBU2hERixPQUFPRSxRQUFVSixFQUFPSyxTQUN2QkosRUFBU0QsR0FBUSxHQUNqQixTQUFVTSxHQUNULElBQU1BLEVBQUVELFNBQ1AsTUFBTSxJQUFJRSxNQUFPLDRDQUVsQixPQUFPTixFQUFTSyxJQUdsQkwsRUFBU0QsR0F0QlgsQ0EwQnVCLG9CQUFYUSxPQUF5QkEsWUFBaEMsRUFBK0MsU0FBVUEsRUFBUUMsR0E0Q3ZELFNBQVhDLEVBQThCQyxHQUNoQyxPQUFjLE1BQVBBLEdBQWVBLElBQVFBLEVBQUlILE9BckNwQyxJQUFJSSxFQUFNLEdBRU5QLEVBQVdHLEVBQU9ILFNBRWxCUSxFQUFXQyxPQUFPQyxlQUVsQkMsRUFBUUosRUFBSUksTUFFWkMsRUFBU0wsRUFBSUssT0FFYkMsRUFBT04sRUFBSU0sS0FFWEMsRUFBVVAsRUFBSU8sUUFFZEMsRUFBYSxHQUViQyxFQUFXRCxFQUFXQyxTQUV0QkMsRUFBU0YsRUFBV0csZUFFcEJDLEVBQWFGLEVBQU9ELFNBRXBCSSxFQUF1QkQsRUFBV0UsS0FBTVosUUFFeENhLEVBQVUsR0FFVkMsRUFBYSxTQUFxQmpCLEdBTWhDLE1BQXNCLG1CQUFSQSxHQUE4QyxpQkFBakJBLEVBQUlrQixVQVdoREMsRUFBNEIsQ0FDL0JDLE1BQU0sRUFDTkMs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TUFBTW5pQixJQUFJbWlCLE1BQU1wL0IsR0FBWSxPQUFNLEVBQUc4L0IsSUFBSSxPQUFNLE9BQWEsU0FBUzdpQixFQUFFamQsRUFBRTIvQiIsImZpbGUiOiJ2ZW5kb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNC4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxOS0wNS0wMVQyMTowNFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy40LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9ICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjRcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMTktMDQtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQobm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmNvbnRlbnREb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlXG5cdC8vIFdlIHVzZSBnZXRDbGllbnRSZWN0cygpIHRvIGNoZWNrIGZvciBoaWRkZW4vZGlzY29ubmVjdGVkLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3hcblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIhZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShpKXtpZihyW2ldKXJldHVybiByW2ldLmV4cG9ydHM7dmFyIG49cltpXT17aTppLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbaV0uY2FsbChuLmV4cG9ydHMsbixuLmV4cG9ydHMsZSksbi5sPSEwLG4uZXhwb3J0c312YXIgcj17fTtlLm09dCxlLmM9cixlLmQ9ZnVuY3Rpb24odCxyLGkpe2Uubyh0LHIpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6aX0pfSxlLm49ZnVuY3Rpb24odCl7dmFyIHI9dCYmdC5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIHQuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gdH07cmV0dXJuIGUuZChyLFwiYVwiLHIpLHJ9LGUubz1mdW5jdGlvbih0LGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKX0sZS5wPVwiXCIsZShlLnM9NCl9KFtmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ci5kKGUsXCJiXCIsZnVuY3Rpb24oKXtyZXR1cm4gbn0pLHIuZChlLFwiaFwiLGZ1bmN0aW9uKCl7cmV0dXJuIG99KSxyLmQoZSxcImlcIixmdW5jdGlvbigpe3JldHVybiBzfSksci5kKGUsXCJnXCIsZnVuY3Rpb24oKXtyZXR1cm4gYX0pLHIuZChlLFwiZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGx9KSxyLmQoZSxcImpcIixmdW5jdGlvbigpe3JldHVybiB1fSksci5kKGUsXCJmXCIsZnVuY3Rpb24oKXtyZXR1cm4gY30pLHIuZChlLFwia1wiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ9KSxyLmQoZSxcImNcIixmdW5jdGlvbigpe3JldHVybiBwfSksci5kKGUsXCJkXCIsZnVuY3Rpb24oKXtyZXR1cm4gaH0pLHIuZChlLFwibFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGR9KSxyLmQoZSxcImFcIixmdW5jdGlvbigpe3JldHVybiB2fSk7dmFyIGk9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sbj1mdW5jdGlvbih0LGUpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXtmb3IodmFyIGk9ITEsbj10W3JdLG89MDtvPGUubGVuZ3RoO28rKyluPT09ZVtvXSYmKGk9ITApO2lmKCFpKXJldHVybiExfXJldHVybiEwfSxvPWZ1bmN0aW9uKHQpe3ZhciBlPXt9O2Zvcih2YXIgciBpbiB0KWVbcl09dFtyXTtyZXR1cm4gZX0scz1mdW5jdGlvbiB0KGUscil7dmFyIG49byhyKTtmb3IodmFyIHMgaW4gZSlzIGluIG4/XCJvYmplY3RcIiE9PWkobltzXSl8fFwib2JqZWN0XCIhPT1pKGVbc10pfHxBcnJheS5pc0FycmF5KGVbc10pfHwobltzXT10KFwib2JqZWN0XCI9PT1pKG5bc10pP25bc106e30sZVtzXSkpOm5bc109ZVtzXTtyZXR1cm4gbn0sYT1mdW5jdGlvbih0LGUpe3JldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwodCxmdW5jdGlvbih0KXtyZXR1cm4gZS5pbmNsdWRlcyh0KX0pfSxsPWZ1bmN0aW9uKHQsZSxyKXt2YXIgaT12b2lkIDA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49dGhpcyxvPWFyZ3VtZW50cztjbGVhclRpbWVvdXQoaSksaT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aT1udWxsLHJ8fHQuYXBwbHkobixvKX0sZSksciYmIWkmJnQuYXBwbHkobixvKX19LHU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuc2xpY2UoMCkscj1bXTswIT09ZS5sZW5ndGg7KXt2YXIgaT1NYXRoLmZsb29yKGUubGVuZ3RoKk1hdGgucmFuZG9tKCkpO3IucHVzaChlW2ldKSxlLnNwbGljZShpLDEpfXJldHVybiByfSxjPWZ1bmN0aW9uKHQsZSl7aWYodC5sZW5ndGghPT1lLmxlbmd0aClyZXR1cm4hMTtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKylpZih0W3JdLnByb3BzLmluZGV4IT09ZVtyXS5wcm9wcy5pbmRleClyZXR1cm4hMTtyZXR1cm4hMH0sZj1mdW5jdGlvbih0LGUpe3JldHVybiB0LnNsaWNlKDApLnNvcnQoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUscil7dmFyIGk9dChlKSxuPXQocik7cmV0dXJuIGk8bj8tMTppPm4/MTowfX0oZSkpfSxwPWZ1bmN0aW9uKHQsZSxyLG4sbyl7aWYodm9pZCAwIT09ZSl7dmFyIHM9bmV3IEVycm9yKCdGaWx0ZXJpenI6IGV4cGVjdGVkIHR5cGUgb2Ygb3B0aW9uIFwiJyt0KydcIiB0byBiZSBcIicrcisnXCIsIGJ1dCBpdHMgdHlwZSBpczogXCInKyh2b2lkIDA9PT1lP1widW5kZWZpbmVkXCI6aShlKSkrJ1wiJyksYT0hMSxsPSExLHU9ci5pbmNsdWRlcyhcImFycmF5XCIpO2lmKCh2b2lkIDA9PT1lP1widW5kZWZpbmVkXCI6aShlKSkubWF0Y2gocik/YT0hMDohYSYmdSYmKGw9QXJyYXkuaXNBcnJheShlKSksIWEmJiF1KXRocm93IHM7aWYoIWEmJnUmJiFsKXRocm93IHM7dmFyIGM9ZnVuY3Rpb24odCl7cmV0dXJuIHQ/XCIgRm9yIGZ1cnRoZXIgaGVscCByZWFkIGhlcmU6IFwiK3Q6XCJcIn07aWYoQXJyYXkuaXNBcnJheShuKSl7dmFyIGY9ITE7aWYobi5mb3JFYWNoKGZ1bmN0aW9uKHQpe3Q9PT1lJiYoZj0hMCl9KSwhZil0aHJvdyBuZXcgRXJyb3IoJ0ZpbHRlcml6cjogYWxsb3dlZCB2YWx1ZXMgZm9yIG9wdGlvbiBcIicrdCsnXCIgYXJlOiAnK24ubWFwKGZ1bmN0aW9uKHQpe3JldHVybidcIicrdCsnXCInfSkuam9pbihcIiwgXCIpKycuIFZhbHVlIHJlY2VpdmVkOiBcIicrZSsnXCIuJytjKG8pKX1lbHNlIGlmKG4gaW5zdGFuY2VvZiBSZWdFeHApe3ZhciBwPWUubWF0Y2gobik7aWYoIXApdGhyb3cgbmV3IEVycm9yKCdGaWx0ZXJpenI6IGludmFsaWQgdmFsdWUgXCInK2UrJ1wiIGZvciBvcHRpb24gXCInK3QrJ1wiIHJlY2VpdmVkLicrYyhvKSl9fX0saD0vKF5saW5lYXIkKXwoXmVhc2UtaW4tb3V0JCl8KF5lYXNlLWluJCl8KF5lYXNlLW91dCQpfCheZWFzZSQpfChec3RlcC1zdGFydCQpfChec3RlcC1lbmQkKXwoXnN0ZXBzXFwoXFxkXFxzKixcXHMqKGVuZHxzdGFydClcXCkpJHwoXmN1YmljLWJlemllclxcKChcXGQqXFwuKlxcZCspXFxzKixcXHMqKFxcZCpcXC4qXFxkKylcXHMqLFxccyooXFxkKlxcLipcXGQrKVxccyosXFxzKihcXGQqXFwuKlxcZCspXFwpKSQvLGQ9XCJcXG4gIHdlYmtpdFRyYW5zaXRpb25FbmQuRmlsdGVyaXpyIFxcbiAgb3RyYW5zaXRpb25lbmQuRmlsdGVyaXpyIFxcbiAgb1RyYW5zaXRpb25FbmQuRmlsdGVyaXpyIFxcbiAgbXNUcmFuc2l0aW9uRW5kLkZpbHRlcml6ciBcXG4gIHRyYW5zaXRpb25lbmQuRmlsdGVyaXpyXFxuXCIsdj17SURMRTpcIklETEVcIixGSUxURVJJTkc6XCJGSUxURVJJTkdcIixTT1JUSU5HOlwiU09SVElOR1wiLFNIVUZGTElORzpcIlNIVUZGTElOR1wifX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfXZhciBuPXIoMiksbz1yKDApLHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBpPWVbcl07aS5lbnVtZXJhYmxlPWkuZW51bWVyYWJsZXx8ITEsaS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gaSYmKGkud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkua2V5LGkpfX1yZXR1cm4gZnVuY3Rpb24oZSxyLGkpe3JldHVybiByJiZ0KGUucHJvdG90eXBlLHIpLGkmJnQoZSxpKSxlfX0oKSxhPXdpbmRvdy5qUXVlcnksbD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06XCIuZmlsdHItY29udGFpbmVyXCIscj1hcmd1bWVudHNbMV07aSh0aGlzLHQpLHRoaXMuJG5vZGU9YShlKSx0aGlzLiRub2RlLmNzcyh7cGFkZGluZzowLHBvc2l0aW9uOlwicmVsYXRpdmVcIix3aWR0aDpcIjEwMCVcIixkaXNwbGF5OlwiZmxleFwiLFwiZmxleC13cmFwXCI6XCJ3cmFwXCJ9KSx0aGlzLnByb3BzPXtGaWx0ZXJJdGVtczp0aGlzLmdldEZpbHRlckl0ZW1zKHIpLHc6dGhpcy5nZXRXaWR0aCgpLGg6MH0sdGhpcy51cGRhdGVGaWx0ZXJJdGVtc0RpbWVuc2lvbnMoKX1yZXR1cm4gcyh0LFt7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy4kbm9kZS5hdHRyKFwic3R5bGVcIixcIlwiKS5maW5kKFwiLmZpbHRyLWl0ZW1cIikuYXR0cihcInN0eWxlXCIsXCJcIiksdGhpcy51bmJpbmRFdmVudHMoKX19LHtrZXk6XCJnZXRGaWx0ZXJJdGVtc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiBhLm1hcCh0aGlzLiRub2RlLmZpbmQoXCIuZmlsdHItaXRlbVwiKSxmdW5jdGlvbihlLHIpe3JldHVybiBuZXcgbi5hKGEoZSkscix0KX0pfX0se2tleTpcInB1c2hcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciByPXRoaXMucHJvcHMuRmlsdGVySXRlbXM7dGhpcy4kbm9kZS5hcHBlbmQodCk7dmFyIGk9ci5sZW5ndGgsbz1uZXcgbi5hKHQsaSxlKTt0aGlzLnByb3BzLkZpbHRlckl0ZW1zLnB1c2gobyl9fSx7a2V5OlwiY2FsY0NvbHVtbnNcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBNYXRoLnJvdW5kKHRoaXMucHJvcHMudy90aGlzLnByb3BzLkZpbHRlckl0ZW1zWzBdLnByb3BzLncpfX0se2tleTpcInVwZGF0ZUZpbHRlckl0ZW1zVHJhbnNpdGlvblN0eWxlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLHIsaSl7dGhpcy5wcm9wcy5GaWx0ZXJJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKG4pe3JldHVybiBuLiRub2RlLmNzcyh7dHJhbnNpdGlvbjpcImFsbCBcIit0K1wicyBcIitlK1wiIFwiK24uY2FsY0RlbGF5KHIsaSkrXCJtc1wifSl9KX19LHtrZXk6XCJ1cGRhdGVIZWlnaHRcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLnByb3BzLmg9dCx0aGlzLiRub2RlLmNzcyhcImhlaWdodFwiLHQpfX0se2tleTpcInVwZGF0ZVdpZHRoXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnByb3BzLnc9dGhpcy5nZXRXaWR0aCgpfX0se2tleTpcInVwZGF0ZUZpbHRlckl0ZW1zRGltZW5zaW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5wcm9wcy5GaWx0ZXJJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnVwZGF0ZURpbWVuc2lvbnMoKX0pfX0se2tleTpcImdldFdpZHRoXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kbm9kZS5pbm5lcldpZHRoKCl9fSx7a2V5OlwiYmluZFRyYW5zaXRpb25FbmRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMuJG5vZGUub24oby5sLE9iamVjdChvLmUpKGZ1bmN0aW9uKCl7dCgpfSxlKSl9fSx7a2V5OlwiYmluZEV2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuJG5vZGUub24oXCJmaWx0ZXJpbmdTdGFydC5GaWx0ZXJpenJcIix0Lm9uRmlsdGVyaW5nU3RhcnQpLHRoaXMuJG5vZGUub24oXCJmaWx0ZXJpbmdFbmQuRmlsdGVyaXpyXCIsdC5vbkZpbHRlcmluZ0VuZCksdGhpcy4kbm9kZS5vbihcInNodWZmbGluZ1N0YXJ0LkZpbHRlcml6clwiLHQub25TaHVmZmxpbmdTdGFydCksdGhpcy4kbm9kZS5vbihcInNodWZmbGluZ0VuZC5GaWx0ZXJpenJcIix0Lm9uU2h1ZmZsaW5nRW5kKSx0aGlzLiRub2RlLm9uKFwic29ydGluZ1N0YXJ0LkZpbHRlcml6clwiLHQub25Tb3J0aW5nU3RhcnQpLHRoaXMuJG5vZGUub24oXCJzb3J0aW5nRW5kLkZpbHRlcml6clwiLHQub25Tb3J0aW5nRW5kKX19LHtrZXk6XCJ1bmJpbmRFdmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuJG5vZGUub2ZmKG8ubCtcIlxcbiAgICAgIGZpbHRlcmluZ1N0YXJ0LkZpbHRlcml6ciBcXG4gICAgICBmaWx0ZXJpbmdFbmQuRmlsdGVyaXpyIFxcbiAgICAgIHNodWZmbGluZ1N0YXJ0LkZpbHRlcml6ciBcXG4gICAgICBzaHVmZmxpbmdFbmQuRmlsdGVyaXpyIFxcbiAgICAgIHNvcnRpbmdTdGFydC5GaWx0ZXJpenIgXFxuICAgICAgc29ydGluZ0VuZC5GaWx0ZXJpenJcIil9fSx7a2V5OlwidHJpZ2dlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuJG5vZGUudHJpZ2dlcih0KX19XSksdH0oKTtlLmE9bH0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfXZhciBuPXIoMCksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIGk9ZVtyXTtpLmVudW1lcmFibGU9aS5lbnVtZXJhYmxlfHwhMSxpLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBpJiYoaS53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsaS5rZXksaSl9fXJldHVybiBmdW5jdGlvbihlLHIsaSl7cmV0dXJuIHImJnQoZS5wcm90b3R5cGUsciksaSYmdChlLGkpLGV9fSgpLHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUscixuKXt2YXIgbz10aGlzO2kodGhpcyx0KTt2YXIgcz1uLmRlbGF5LGE9bi5kZWxheU1vZGUsbD1uLmZpbHRlck91dENzcyx1PW4uYW5pbWF0aW9uRHVyYXRpb24sYz1uLmVhc2luZzt0aGlzLiRub2RlPWUsdGhpcy5wcm9wcz17ZGF0YTpmdW5jdGlvbigpe3ZhciB0PW8uJG5vZGUuZGF0YSgpO3JldHVybiBkZWxldGUgdC5jYXRlZ29yeSxkZWxldGUgdC5zb3J0LHR9KCksaW5kZXg6cixzb3J0RGF0YTp0aGlzLiRub2RlLmRhdGEoXCJzb3J0XCIpLGxhc3RQb3NpdGlvbjp7bGVmdDowLHRvcDowfSxmaWx0ZXJlZE91dDohMSx3OnRoaXMuZ2V0V2lkdGgoKSxoOnRoaXMuZ2V0SGVpZ2h0KCl9LHRoaXMuJG5vZGUuY3NzKGwpLmNzcyh7XCItd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHlcIjpcImhpZGRlblwiLHBlcnNwZWN0aXZlOlwiMTAwMHB4XCIsXCItd2Via2l0LXBlcnNwZWN0aXZlXCI6XCIxMDAwcHhcIixcIi13ZWJraXQtdHJhbnNmb3JtLXN0eWxlXCI6XCJwcmVzZXJ2ZS0zZFwiLHBvc2l0aW9uOlwiYWJzb2x1dGVcIix0cmFuc2l0aW9uOlwiYWxsIFwiK3UrXCJzIFwiK2MrXCIgXCIrdGhpcy5jYWxjRGVsYXkocyxhKStcIm1zXCJ9KSx0aGlzLmJpbmRFdmVudHMoKX1yZXR1cm4gbyh0LFt7a2V5OlwiZmlsdGVySW5cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciByPU9iamVjdChuLmgpKGUpO3IudHJhbnNmb3JtKz1cIiB0cmFuc2xhdGUzZChcIit0LmxlZnQrXCJweCxcIit0LnRvcCtcInB4LCAwKVwiLHRoaXMuJG5vZGUuY3NzKHIpLHRoaXMucHJvcHMubGFzdFBvc2l0aW9uPXQsdGhpcy5wcm9wcy5maWx0ZXJlZE91dD0hMX19LHtrZXk6XCJmaWx0ZXJPdXRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1PYmplY3Qobi5oKSh0KSxyPXRoaXMucHJvcHMubGFzdFBvc2l0aW9uO2UudHJhbnNmb3JtKz1cIiB0cmFuc2xhdGUzZChcIityLmxlZnQrXCJweCxcIityLnRvcCtcInB4LCAwKVwiLHRoaXMuJG5vZGUuY3NzKGUpLHRoaXMucHJvcHMuZmlsdGVyZWRPdXQ9ITB9fSx7a2V5OlwiY2FsY0RlbGF5XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgcj0wO3JldHVyblwicHJvZ3Jlc3NpdmVcIj09PWU/cj10KnRoaXMucHJvcHMuaW5kZXg6dGhpcy5wcm9wcy5pbmRleCUyPT0wJiYocj10KSxyfX0se2tleTpcImNvbnRlbnRzTWF0Y2hTZWFyY2hcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gQm9vbGVhbih0aGlzLmdldENvbnRlbnRzTG93ZXJjYXNlKCkuaW5jbHVkZXModCkpfX0se2tleTpcImdldENvbnRlbnRzTG93ZXJjYXNlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kbm9kZS50ZXh0KCkudG9Mb3dlckNhc2UoKX19LHtrZXk6XCJnZXRDYXRlZ29yaWVzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kbm9kZS5hdHRyKFwiZGF0YS1jYXRlZ29yeVwiKS5zcGxpdCgvXFxzKixcXHMqL2cpfX0se2tleTpcImdldEhlaWdodFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJG5vZGUuaW5uZXJIZWlnaHQoKX19LHtrZXk6XCJnZXRXaWR0aFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJG5vZGUuaW5uZXJXaWR0aCgpfX0se2tleTpcInRyaWdnZXJcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLiRub2RlLnRyaWdnZXIodCl9fSx7a2V5OlwidXBkYXRlRGltZW5zaW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5wcm9wcy53PXRoaXMuZ2V0V2lkdGgoKSx0aGlzLnByb3BzLmg9dGhpcy5nZXRIZWlnaHQoKX19LHtrZXk6XCJiaW5kRXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJG5vZGUub24obi5sLGZ1bmN0aW9uKCl7dmFyIGU9dC5wcm9wcy5maWx0ZXJlZE91dDt0LiRub2RlLnRvZ2dsZUNsYXNzKFwiZmlsdGVyZWRPdXRcIixlKSx0LiRub2RlLmNzcyhcInotaW5kZXhcIixlPy0xZTM6XCJcIil9KX19LHtrZXk6XCJ1bmJpbmRFdmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuJG5vZGUub2ZmKG4ubCl9fV0pLHR9KCk7ZS5hPXN9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT17YW5pbWF0aW9uRHVyYXRpb246LjUsY2FsbGJhY2tzOntvbkZpbHRlcmluZ1N0YXJ0OmZ1bmN0aW9uKCl7fSxvbkZpbHRlcmluZ0VuZDpmdW5jdGlvbigpe30sb25TaHVmZmxpbmdTdGFydDpmdW5jdGlvbigpe30sb25TaHVmZmxpbmdFbmQ6ZnVuY3Rpb24oKXt9LG9uU29ydGluZ1N0YXJ0OmZ1bmN0aW9uKCl7fSxvblNvcnRpbmdFbmQ6ZnVuY3Rpb24oKXt9fSxjb250cm9sc1NlbGVjdG9yOlwiXCIsZGVsYXk6MCxkZWxheU1vZGU6XCJwcm9ncmVzc2l2ZVwiLGVhc2luZzpcImVhc2Utb3V0XCIsZmlsdGVyOlwiYWxsXCIsZmlsdGVyT3V0Q3NzOntvcGFjaXR5OjAsdHJhbnNmb3JtOlwic2NhbGUoMC41KVwifSxmaWx0ZXJJbkNzczp7b3BhY2l0eToxLHRyYW5zZm9ybTpcInNjYWxlKDEpXCJ9LGxheW91dDpcInNhbWVTaXplXCIsbXVsdGlmaWx0ZXJMb2dpY2FsT3BlcmF0b3I6XCJvclwiLHNldHVwQ29udHJvbHM6ITB9O2UuYT1pfSxmdW5jdGlvbih0LGUscil7dC5leHBvcnRzPXIoNSl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe2lmKEFycmF5LmlzQXJyYXkodCkpe2Zvcih2YXIgZT0wLHI9QXJyYXkodC5sZW5ndGgpO2U8dC5sZW5ndGg7ZSsrKXJbZV09dFtlXTtyZXR1cm4gcn1yZXR1cm4gQXJyYXkuZnJvbSh0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDYpLG89cigxKSxzPXIoMiksYT1yKDMpLGw9cigxNSk7ci5kKGUsXCJGaWx0ZXJpenJcIixmdW5jdGlvbigpe3JldHVybiBuLmF9KSxyLmQoZSxcIkZpbHRlckNvbnRhaW5lclwiLGZ1bmN0aW9uKCl7cmV0dXJuIG8uYX0pLHIuZChlLFwiRmlsdGVySXRlbVwiLGZ1bmN0aW9uKCl7cmV0dXJuIHMuYX0pLHIuZChlLFwiRGVmYXVsdE9wdGlvbnNcIixmdW5jdGlvbigpe3JldHVybiBhLmF9KTt2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxjPXZvaWQgMCxmPXZvaWQgMDtjPWY9d2luZG93LmpRdWVyeSxmdW5jdGlvbih0KXtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJGaWx0ZXJpenIgcmVxdWlyZXMgalF1ZXJ5IHRvIHdvcmsuXCIpO09iamVjdChsLmEpKCksdC5mbi5maWx0ZXJpenI9ZnVuY3Rpb24oKXt2YXIgZT1cIi5cIit0LnRyaW0odGhpcy5nZXQoMCkuY2xhc3NOYW1lKS5yZXBsYWNlKC9cXHMrL2csXCIuXCIpLHI9YXJndW1lbnRzO2lmKCF0aGlzLl9mbHRyJiYwPT09ci5sZW5ndGh8fDE9PT1yLmxlbmd0aCYmXCJvYmplY3RcIj09PXUoclswXSkpe3ZhciBvPXIubGVuZ3RoPjA/clswXTphLmE7dGhpcy5fZmx0cj1uZXcgbi5hKGUsbyl9ZWxzZSBpZihyLmxlbmd0aD49MSYmXCJzdHJpbmdcIj09dHlwZW9mIHJbMF0pe3ZhciBzPXJbMF0sbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChyLDEpLGM9dGhpcy5fZmx0cjtzd2l0Y2gocyl7Y2FzZVwiZmlsdGVyXCI6cmV0dXJuIGMuZmlsdGVyLmFwcGx5KGMsaShsKSksdGhpcztjYXNlXCJpbnNlcnRJdGVtXCI6cmV0dXJuIGMuaW5zZXJ0SXRlbS5hcHBseShjLGkobCkpLHRoaXM7Y2FzZVwidG9nZ2xlRmlsdGVyXCI6cmV0dXJuIGMudG9nZ2xlRmlsdGVyLmFwcGx5KGMsaShsKSksdGhpcztjYXNlXCJzb3J0XCI6cmV0dXJuIGMuc29ydC5hcHBseShjLGkobCkpLHRoaXM7Y2FzZVwic2h1ZmZsZVwiOnJldHVybiBjLnNodWZmbGUuYXBwbHkoYyxpKGwpKSx0aGlzO2Nhc2VcInNlYXJjaFwiOnJldHVybiBjLnNlYXJjaC5hcHBseShjLGkobCkpLHRoaXM7Y2FzZVwic2V0T3B0aW9uc1wiOnJldHVybiBjLnNldE9wdGlvbnMuYXBwbHkoYyxpKGwpKSx0aGlzO2Nhc2VcImRlc3Ryb3lcIjpyZXR1cm4gYy5kZXN0cm95LmFwcGx5KGMsaShsKSksZGVsZXRlIHRoaXMuX2ZsdHIsdGhpcztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcIkZpbHRlcml6cjogXCIrcytcIiBpcyBub3QgcGFydCBvZiB0aGUgRmlsdGVyaXpyIEFQSS4gUGxlYXNlIHJlZmVyIHRvIHRoZSBkb2NzIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiKX19cmV0dXJuIHRoaXN9fShmKSxlLmRlZmF1bHQ9YyxyKDE2KX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfXZhciBuPXIoNyksbz1yKDEpLHM9cig4KSxhPXIoMyksbD1yKDApLHU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBpPWVbcl07aS5lbnVtZXJhYmxlPWkuZW51bWVyYWJsZXx8ITEsaS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gaSYmKGkud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkua2V5LGkpfX1yZXR1cm4gZnVuY3Rpb24oZSxyLGkpe3JldHVybiByJiZ0KGUucHJvdG90eXBlLHIpLGkmJnQoZSxpKSxlfX0oKSxjPXdpbmRvdy5qUXVlcnksZj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06XCIuZmlsdHItY29udGFpbmVyXCIscj1hcmd1bWVudHNbMV07aSh0aGlzLHQpLHRoaXMub3B0aW9ucz1PYmplY3QobC5pKShhLmEscik7dmFyIHM9bmV3IG8uYShlLHRoaXMub3B0aW9ucyk7aWYoIXMuJG5vZGUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkZpbHRlcml6cjogY291bGQgbm90IGZpbmQgYSBjb250YWluZXIgd2l0aCB0aGUgc2VsZWN0b3IgXCIrZStcIiwgdG8gaW5pdGlhbGl6ZSBGaWx0ZXJpenIuXCIpO25ldyBuLmEodGhpcyx0aGlzLm9wdGlvbnMuY29udHJvbHNTZWxlY3RvciksdGhpcy5wcm9wcz17ZmlsdGVyaXpyU3RhdGU6bC5hLklETEUsc2VhcmNoVGVybTpcIlwiLHNvcnQ6XCJpbmRleFwiLHNvcnRPcmRlcjpcImFzY1wiLEZpbHRlckNvbnRhaW5lcjpzLEZpbHRlckl0ZW1zOnMucHJvcHMuRmlsdGVySXRlbXMsRmlsdGVyZWRJdGVtczpbXX0sdGhpcy5iaW5kRXZlbnRzKCksdGhpcy5maWx0ZXIodGhpcy5vcHRpb25zLmZpbHRlcil9cmV0dXJuIHUodCxbe2tleTpcImZpbHRlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucHJvcHMscj1lLnNlYXJjaFRlcm0saT1lLkZpbHRlckNvbnRhaW5lcixuPWUuRmlsdGVySXRlbXM7aS50cmlnZ2VyKFwiZmlsdGVyaW5nU3RhcnRcIiksdGhpcy5wcm9wcy5maWx0ZXJpenJTdGF0ZT1sLmEuRklMVEVSSU5HLHQ9QXJyYXkuaXNBcnJheSh0KT90Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC50b1N0cmluZygpfSk6dC50b1N0cmluZygpO3ZhciBvPXRoaXMuc2VhcmNoRmlsdGVySXRlbXModGhpcy5maWx0ZXJGaWx0ZXJJdGVtcyhuLHQpLHIpO3RoaXMucHJvcHMuRmlsdGVyZWRJdGVtcz1vLHRoaXMucmVuZGVyKG8pfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMucHJvcHMuRmlsdGVyQ29udGFpbmVyLGU9dGhpcy5vcHRpb25zLmNvbnRyb2xzU2VsZWN0b3I7dC5kZXN0cm95KCksYyh3aW5kb3cpLm9mZihcInJlc2l6ZS5GaWx0ZXJpenJcIiksYyhlK1wiW2RhdGEtZmlsdGVyXVwiKS5vZmYoXCJjbGljay5GaWx0ZXJpenJcIiksYyhlK1wiW2RhdGEtbXVsdGlmaWx0ZXJdXCIpLm9mZihcImNsaWNrLkZpbHRlcml6clwiKSxjKGUrXCJbZGF0YS1zaHVmZmxlXVwiKS5vZmYoXCJjbGljay5GaWx0ZXJpenJcIiksYyhlK1wiW2RhdGEtc2VhcmNoXVwiKS5vZmYoXCJrZXl1cC5GaWx0ZXJpenJcIiksYyhlK1wiW2RhdGEtc29ydEFzY11cIikub2ZmKFwiY2xpY2suRmlsdGVyaXpyXCIpLGMoZStcIltkYXRhLXNvcnREZXNjXVwiKS5vZmYoXCJjbGljay5GaWx0ZXJpenJcIil9fSx7a2V5OlwiaW5zZXJ0SXRlbVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucHJvcHMuRmlsdGVyQ29udGFpbmVyLHI9dC5jbG9uZSgpLmF0dHIoXCJzdHlsZVwiLFwiXCIpO2UucHVzaChyLHRoaXMub3B0aW9ucyk7dmFyIGk9dGhpcy5maWx0ZXJGaWx0ZXJJdGVtcyh0aGlzLnByb3BzLkZpbHRlckl0ZW1zLHRoaXMub3B0aW9ucy5maWx0ZXIpO3RoaXMucmVuZGVyKGkpfX0se2tleTpcInNvcnRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcImluZGV4XCIsZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJhc2NcIixyPXRoaXMucHJvcHMsaT1yLkZpbHRlckNvbnRhaW5lcixuPXIuRmlsdGVySXRlbXM7aS50cmlnZ2VyKFwic29ydGluZ1N0YXJ0XCIpLHRoaXMucHJvcHMuZmlsdGVyaXpyU3RhdGU9bC5hLlNPUlRJTkcsdGhpcy5wcm9wcy5GaWx0ZXJJdGVtcz10aGlzLnNvcnRGaWx0ZXJJdGVtcyhuLHQsZSk7dmFyIG89dGhpcy5maWx0ZXJGaWx0ZXJJdGVtcyh0aGlzLnByb3BzLkZpbHRlckl0ZW1zLHRoaXMub3B0aW9ucy5maWx0ZXIpO3RoaXMucHJvcHMuRmlsdGVyZWRJdGVtcz1vLHRoaXMucmVuZGVyKG8pfX0se2tleTpcInNlYXJjaFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnRoaXMucHJvcHMuc2VhcmNoVGVybSxlPXRoaXMucHJvcHMuRmlsdGVySXRlbXMscj10aGlzLnNlYXJjaEZpbHRlckl0ZW1zKHRoaXMuZmlsdGVyRmlsdGVySXRlbXMoZSx0aGlzLm9wdGlvbnMuZmlsdGVyKSx0KTt0aGlzLnByb3BzLkZpbHRlcmVkSXRlbXM9cix0aGlzLnJlbmRlcihyKX19LHtrZXk6XCJzaHVmZmxlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnByb3BzLGU9dC5GaWx0ZXJDb250YWluZXIscj10LkZpbHRlcmVkSXRlbXM7ZS50cmlnZ2VyKFwic2h1ZmZsaW5nU3RhcnRcIiksdGhpcy5wcm9wcy5maWx0ZXJpenJTdGF0ZT1sLmEuU0hVRkZMSU5HO3ZhciBpPXRoaXMuc2h1ZmZsZUZpbHRlckl0ZW1zKHIpO3RoaXMucHJvcHMuRmlsdGVyZWRJdGVtcz1pLHRoaXMucmVuZGVyKGkpfX0se2tleTpcInNldE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbih0KXtPYmplY3QobC5jKShcImFuaW1hdGlvbkR1cmF0aW9uXCIsdC5hbmltYXRpb25EdXJhdGlvbixcIm51bWJlclwiKSxPYmplY3QobC5jKShcImNhbGxiYWNrc1wiLHQuY2FsbGJhY2tzLFwib2JqZWN0XCIpLE9iamVjdChsLmMpKFwiY29udHJvbHNTZWxlY3RvclwiLHQuY29udHJvbHNTZWxlY3RvcixcInN0cmluZ1wiKSxPYmplY3QobC5jKShcImRlbGF5XCIsdC5kZWxheSxcIm51bWJlclwiKSxPYmplY3QobC5jKShcImVhc2luZ1wiLHQuZWFzaW5nLFwic3RyaW5nXCIsbC5kLFwiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3NyZWYvY3NzM19wcl90cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbi5hc3BcIiksT2JqZWN0KGwuYykoXCJkZWxheU1vZGVcIix0LmRlbGF5TW9kZSxcInN0cmluZ1wiLFtcInByb2dyZXNzaXZlXCIsXCJhbHRlcm5hdGVcIl0pLE9iamVjdChsLmMpKFwiZmlsdGVyXCIsdC5maWx0ZXIsXCJzdHJpbmd8bnVtYmVyfGFycmF5XCIpLE9iamVjdChsLmMpKFwiZmlsdGVyT3V0Q3NzXCIsdC5maWx0ZXJPdXRDc3MsXCJvYmplY3RcIiksT2JqZWN0KGwuYykoXCJmaWx0ZXJJbkNzc1wiLHQuZmlsdGVyT3V0Q3NzLFwib2JqZWN0XCIpLE9iamVjdChsLmMpKFwibGF5b3V0XCIsdC5sYXlvdXQsXCJzdHJpbmdcIixbXCJzYW1lU2l6ZVwiLFwidmVydGljYWxcIixcImhvcml6b250YWxcIixcInNhbWVIZWlnaHRcIixcInNhbWVXaWR0aFwiLFwicGFja2VkXCJdKSxPYmplY3QobC5jKShcIm11bHRpZmlsdGVyTG9naWNhbE9wZXJhdG9yXCIsdC5tdWx0aWZpbHRlckxvZ2ljYWxPcGVyYXRvcixcInN0cmluZ1wiLFtcImFuZFwiLFwib3JcIl0pLE9iamVjdChsLmMpKFwic2V0dXBDb250cm9sc1wiLHQuc2V0dXBDb250cm9scyxcImJvb2xlYW5cIiksdGhpcy5vcHRpb25zPU9iamVjdChsLmkpKHRoaXMub3B0aW9ucyx0KSwodC5hbmltYXRpb25EdXJhdGlvbnx8dC5kZWxheXx8dC5kZWxheU1vZGV8fHQuZWFzaW5nKSYmdGhpcy5wcm9wcy5GaWx0ZXJDb250YWluZXIudXBkYXRlRmlsdGVySXRlbXNUcmFuc2l0aW9uU3R5bGUodC5hbmltYXRpb25EdXJhdGlvbix0LmVhc2luZyx0LmRlbGF5LHQuZGVsYXlNb2RlKSwodC5jYWxsYmFja3N8fHQuYW5pbWF0aW9uRHVyYXRpb24pJiZ0aGlzLnJlYmluZEZpbHRlckNvbnRhaW5lckV2ZW50cygpLHQuZmlsdGVyJiZ0aGlzLmZpbHRlcih0LmZpbHRlciksdC5tdWx0aWZpbHRlckxvZ2ljYWxPcGVyYXRvciYmdGhpcy5maWx0ZXIodGhpcy5vcHRpb25zLmZpbHRlcil9fSx7a2V5OlwidG9nZ2xlRmlsdGVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcHRpb25zLmZpbHRlcjtcImFsbFwiPT09ZT9lPXQ6QXJyYXkuaXNBcnJheShlKT9lLmluY2x1ZGVzKHQpPyhlPWUuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlIT09dH0pLDE9PT1lLmxlbmd0aCYmKGU9ZVswXSkpOmUucHVzaCh0KTplPWU9PT10P1wiYWxsXCI6W2UsdF0sdGhpcy5vcHRpb25zLmZpbHRlcj1lLHRoaXMuZmlsdGVyKHRoaXMub3B0aW9ucy5maWx0ZXIpfX0se2tleTpcImZpbHRlckZpbHRlckl0ZW1zXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgcj10aGlzLm9wdGlvbnMubXVsdGlmaWx0ZXJMb2dpY2FsT3BlcmF0b3I7cmV0dXJuXCJhbGxcIj09PWU/dDp0LmZpbHRlcihmdW5jdGlvbih0KXt2YXIgaT10LmdldENhdGVnb3JpZXMoKTtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9cIm9yXCI9PT1yP09iamVjdChsLmcpKGksZSkubGVuZ3RoOk9iamVjdChsLmIpKGUsaSk6aS5pbmNsdWRlcyhlKX0pfX0se2tleTpcInNvcnRGaWx0ZXJJdGVtc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcImluZGV4XCIscj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06XCJhc2NcIixpPU9iamVjdChsLmspKHQsZnVuY3Rpb24odCl7cmV0dXJuXCJpbmRleFwiIT09ZSYmXCJzb3J0RGF0YVwiIT09ZT90LnByb3BzLmRhdGFbZV06dC5wcm9wc1tlXX0pO3JldHVyblwiYXNjXCI9PT1yP2k6aS5yZXZlcnNlKCl9fSx7a2V5Olwic2VhcmNoRmlsdGVySXRlbXNcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5wcm9wcy5zZWFyY2hUZXJtO3JldHVybiBlP3QuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvbnRlbnRzTWF0Y2hTZWFyY2goZSl9KTp0fX0se2tleTpcInNodWZmbGVGaWx0ZXJJdGVtc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1PYmplY3QobC5qKSh0KTt0Lmxlbmd0aD4xJiZPYmplY3QobC5mKSh0LGUpOyllPU9iamVjdChsLmopKHQpO3JldHVybiBlfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMscj10aGlzLm9wdGlvbnMsaT1yLmZpbHRlcixuPXIuZmlsdGVySW5Dc3Msbz1yLmZpbHRlck91dENzcyxhPXIubGF5b3V0LHU9ci5tdWx0aWZpbHRlckxvZ2ljYWxPcGVyYXRvcjt0aGlzLnByb3BzLkZpbHRlckl0ZW1zLmZpbHRlcihmdW5jdGlvbih0KXt2YXIgcj10LmdldENhdGVnb3JpZXMoKSxuPUFycmF5LmlzQXJyYXkoaSksbz10LmNvbnRlbnRzTWF0Y2hTZWFyY2goZS5wcm9wcy5zZWFyY2hUZXJtKTtyZXR1cm4hKG4/XCJvclwiPT09dT9PYmplY3QobC5nKShyLGkpLmxlbmd0aDpPYmplY3QobC5iKShpLHIpOnIuaW5jbHVkZXMoaSkpfHwhb30pLmZvckVhY2goZnVuY3Rpb24odCl7dC5maWx0ZXJPdXQobyl9KTt2YXIgYz1PYmplY3Qocy5hKShhLHRoaXMpO3QuZm9yRWFjaChmdW5jdGlvbih0LGUpe3QuZmlsdGVySW4oY1tlXSxuKX0pfX0se2tleTpcIm9uVHJhbnNpdGlvbkVuZENhbGxiYWNrXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnByb3BzLGU9dC5maWx0ZXJpenJTdGF0ZSxyPXQuRmlsdGVyQ29udGFpbmVyO3N3aXRjaChlKXtjYXNlIGwuYS5GSUxURVJJTkc6ci50cmlnZ2VyKFwiZmlsdGVyaW5nRW5kXCIpO2JyZWFrO2Nhc2UgbC5hLlNPUlRJTkc6ci50cmlnZ2VyKFwic29ydGluZ0VuZFwiKTticmVhaztjYXNlIGwuYS5TSFVGRkxJTkc6ci50cmlnZ2VyKFwic2h1ZmZsaW5nRW5kXCIpfXRoaXMucHJvcHMuZmlsdGVyaXpyU3RhdGU9bC5hLklETEV9fSx7a2V5OlwicmViaW5kRmlsdGVyQ29udGFpbmVyRXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5wcm9wcy5GaWx0ZXJDb250YWluZXIscj10aGlzLm9wdGlvbnMsaT1yLmFuaW1hdGlvbkR1cmF0aW9uLG49ci5jYWxsYmFja3M7ZS51bmJpbmRFdmVudHMoKSxlLmJpbmRFdmVudHMobiksZS5iaW5kVHJhbnNpdGlvbkVuZChmdW5jdGlvbigpe3Qub25UcmFuc2l0aW9uRW5kQ2FsbGJhY2soKX0saSl9fSx7a2V5OlwiYmluZEV2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMucHJvcHMuRmlsdGVyQ29udGFpbmVyO3RoaXMucmViaW5kRmlsdGVyQ29udGFpbmVyRXZlbnRzKCksYyh3aW5kb3cpLm9uKFwicmVzaXplLkZpbHRlcml6clwiLE9iamVjdChsLmUpKGZ1bmN0aW9uKCl7ZS51cGRhdGVXaWR0aCgpLGUudXBkYXRlRmlsdGVySXRlbXNEaW1lbnNpb25zKCksdC5maWx0ZXIodC5vcHRpb25zLmZpbHRlcil9LDI1MCkpfX1dKSx0fSgpO2UuYT1mfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9dmFyIG49cigwKSxvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgaT1lW3JdO2kuZW51bWVyYWJsZT1pLmVudW1lcmFibGV8fCExLGkuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGkmJihpLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxpLmtleSxpKX19cmV0dXJuIGZ1bmN0aW9uKGUscixpKXtyZXR1cm4gciYmdChlLnByb3RvdHlwZSxyKSxpJiZ0KGUsaSksZX19KCkscz13aW5kb3cualF1ZXJ5LGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcIlwiO2kodGhpcyx0KSx0aGlzLnByb3BzPXtGaWx0ZXJpenI6ZSxzZWxlY3RvcjpyfSx0aGlzLnNldHVwRmlsdGVyQ29udHJvbHMoKSx0aGlzLnNldHVwU2h1ZmZsZUNvbnRyb2xzKCksdGhpcy5zZXR1cFNlYXJjaENvbnRyb2xzKCksdGhpcy5zZXR1cFNvcnRDb250cm9scygpfXJldHVybiBvKHQsW3trZXk6XCJzZXR1cEZpbHRlckNvbnRyb2xzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnByb3BzLGU9dC5GaWx0ZXJpenIscj10LnNlbGVjdG9yO3MocitcIltkYXRhLWZpbHRlcl1cIikub24oXCJjbGljay5GaWx0ZXJpenJcIixmdW5jdGlvbih0KXt2YXIgcj1zKHQuY3VycmVudFRhcmdldCksaT1yLmF0dHIoXCJkYXRhLWZpbHRlclwiKTtlLm9wdGlvbnMuZmlsdGVyPWksZS5maWx0ZXIoZS5vcHRpb25zLmZpbHRlcil9KSxzKHIrXCJbZGF0YS1tdWx0aWZpbHRlcl1cIikub24oXCJjbGljay5GaWx0ZXJpenJcIixmdW5jdGlvbih0KXt2YXIgcj1zKHQudGFyZ2V0KSxpPXIuYXR0cihcImRhdGEtbXVsdGlmaWx0ZXJcIik7ZS50b2dnbGVGaWx0ZXIoaSl9KX19LHtrZXk6XCJzZXR1cFNodWZmbGVDb250cm9sc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wcm9wcyxlPXQuRmlsdGVyaXpyLHI9dC5zZWxlY3RvcjtzKHIrXCJbZGF0YS1zaHVmZmxlXVwiKS5vbihcImNsaWNrLkZpbHRlcml6clwiLGZ1bmN0aW9uKCl7ZS5zaHVmZmxlKCl9KX19LHtrZXk6XCJzZXR1cFNlYXJjaENvbnRyb2xzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnByb3BzLGU9dC5GaWx0ZXJpenIscj10LnNlbGVjdG9yO3MocitcIltkYXRhLXNlYXJjaF1cIikub24oXCJrZXl1cC5GaWx0ZXJpenJcIixPYmplY3Qobi5lKShmdW5jdGlvbih0KXt2YXIgcj1zKHQudGFyZ2V0KSxpPXIudmFsKCk7ZS5wcm9wcy5zZWFyY2hUZXJtPWkudG9Mb3dlckNhc2UoKSxlLnNlYXJjaChlLnByb3BzLnNlYXJjaFRlcm0pfSwyNTApKX19LHtrZXk6XCJzZXR1cFNvcnRDb250cm9sc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wcm9wcyxlPXQuRmlsdGVyaXpyLHI9dC5zZWxlY3RvcjtzKHIrXCJbZGF0YS1zb3J0QXNjXVwiKS5vbihcImNsaWNrLkZpbHRlcml6clwiLGZ1bmN0aW9uKCl7dmFyIHQ9cyhyK1wiW2RhdGEtc29ydE9yZGVyXVwiKS52YWwoKTtlLnByb3BzLnNvcnRPcmRlcj1cImFzY1wiLGUuc29ydCh0LFwiYXNjXCIpfSkscyhyK1wiW2RhdGEtc29ydERlc2NdXCIpLm9uKFwiY2xpY2suRmlsdGVyaXpyXCIsZnVuY3Rpb24oKXt2YXIgdD1zKHIrXCJbZGF0YS1zb3J0T3JkZXJdXCIpLnZhbCgpO2UucHJvcHMuc29ydE9yZGVyPVwiZGVzY1wiLGUuc29ydCh0LFwiZGVzY1wiKX0pfX1dKSx0fSgpO2UuYT1hfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9cig5KSxuPXIoMTApLG89cigxMSkscz1yKDEyKSxhPXIoMTMpLGw9cigxNCksdT1mdW5jdGlvbih0LGUpe3N3aXRjaCh0KXtjYXNlXCJob3Jpem9udGFsXCI6cmV0dXJuIE9iamVjdChpLmEpKGUpO2Nhc2VcInZlcnRpY2FsXCI6cmV0dXJuIE9iamVjdChuLmEpKGUpO2Nhc2VcInNhbWVIZWlnaHRcIjpyZXR1cm4gT2JqZWN0KG8uYSkoZSk7Y2FzZVwic2FtZVdpZHRoXCI6cmV0dXJuIE9iamVjdChzLmEpKGUpO2Nhc2VcInNhbWVTaXplXCI6cmV0dXJuIE9iamVjdChhLmEpKGUpO2Nhc2VcInBhY2tlZFwiOnJldHVybiBPYmplY3QobC5hKShlKTtkZWZhdWx0OnJldHVybiBPYmplY3QoYS5hKShlKX19O2UuYT11fSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9ZnVuY3Rpb24odCl7dmFyIGU9dC5wcm9wcyxyPWUuRmlsdGVyQ29udGFpbmVyLGk9ZS5GaWx0ZXJlZEl0ZW1zLG49MCxvPTAscz1pLm1hcChmdW5jdGlvbih0KXt2YXIgZT10LnByb3BzLHI9ZS53LGk9ZS5oLHM9e2xlZnQ6bix0b3A6MH07cmV0dXJuIG4rPXIsaT5vJiYobz1pKSxzfSk7cmV0dXJuIHIudXBkYXRlSGVpZ2h0KG8pLHN9O2UuYT1pfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9ZnVuY3Rpb24odCl7dmFyIGU9dC5wcm9wcyxyPWUuRmlsdGVyQ29udGFpbmVyLGk9ZS5GaWx0ZXJlZEl0ZW1zLG49MCxvPWkubWFwKGZ1bmN0aW9uKHQpe3ZhciBlPXQucHJvcHMuaCxyPXtsZWZ0OjAsdG9wOm59O3JldHVybiBuKz1lLHJ9KTtyZXR1cm4gci51cGRhdGVIZWlnaHQobiksb307ZS5hPWl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1mdW5jdGlvbih0KXt2YXIgZT10LnByb3BzLHI9ZS5GaWx0ZXJDb250YWluZXIsaT1lLkZpbHRlcmVkSXRlbXMsbj1yLnByb3BzLncsbz1pWzBdLnByb3BzLmgscz0wLGE9MCxsPWkubWFwKGZ1bmN0aW9uKHQpe3ZhciBlPXQucHJvcHMudzthK2U+biYmKHMrKyxhPTApO3ZhciByPXtsZWZ0OmEsdG9wOm8qc307cmV0dXJuIGErPWUscn0pO3JldHVybiByLnVwZGF0ZUhlaWdodCgocysxKSppWzBdLnByb3BzLmgpLGx9O2UuYT1pfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtpZihBcnJheS5pc0FycmF5KHQpKXtmb3IodmFyIGU9MCxyPUFycmF5KHQubGVuZ3RoKTtlPHQubGVuZ3RoO2UrKylyW2VdPXRbZV07cmV0dXJuIHJ9cmV0dXJuIEFycmF5LmZyb20odCl9dmFyIG49ZnVuY3Rpb24odCl7dmFyIGU9dC5wcm9wcyxyPWUuRmlsdGVyQ29udGFpbmVyLG49ZS5GaWx0ZXJlZEl0ZW1zLHM9ci5jYWxjQ29sdW1ucygpLGE9MCxsPUFycmF5LmFwcGx5KG51bGwsQXJyYXkocykpLm1hcChOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YsMCksdT1uLm1hcChmdW5jdGlvbih0LGUpe3ZhciByPXQucHJvcHMsaT1yLncsdT1yLmg7ZSVzPT0wJiZlPj1zJiZhKys7dmFyIGM9ZS1zKmE7cmV0dXJuIGxbY10rPXUse2xlZnQ6YyppLHRvcDpvKG4scyxlKX19KTtyZXR1cm4gci51cGRhdGVIZWlnaHQoTWF0aC5tYXguYXBwbHkoTWF0aCxpKGwpKSksdX0sbz1mdW5jdGlvbih0LGUscil7aWYoZTw9MClyZXR1cm4gMDt2YXIgaT0wO2lmKHI8ZS0xKXJldHVybiAwO2ZvcihyLT1lO3I+PTA7KWkrPXRbcl0ucHJvcHMuaCxyLT1lO3JldHVybiBpfTtlLmE9bn0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPWZ1bmN0aW9uKHQpe3ZhciBlPXQucHJvcHMscj1lLkZpbHRlckNvbnRhaW5lcixpPWUuRmlsdGVyZWRJdGVtcyxuPXIuY2FsY0NvbHVtbnMoKSxvPTAscz1pLm1hcChmdW5jdGlvbih0LGUpe3JldHVybiBlJW49PTAmJmU+PW4mJm8rKyx7bGVmdDooZS1uKm8pKnQucHJvcHMudyx0b3A6byp0LnByb3BzLmh9fSksYT1pWzBdJiZpWzBdLnByb3BzLmh8fDA7cmV0dXJuIHIudXBkYXRlSGVpZ2h0KChvKzEpKmEpLHN9O2UuYT1pfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9ZnVuY3Rpb24odCl7dmFyIGU9dC5wcm9wcyxyPWUuRmlsdGVyQ29udGFpbmVyLGk9ZS5GaWx0ZXJlZEl0ZW1zLG89bmV3IG4oci5wcm9wcy53KSxzPWkubWFwKGZ1bmN0aW9uKHQpe3ZhciBlPXQucHJvcHM7cmV0dXJue3c6ZS53LGg6ZS5ofX0pO28uZml0KHMpO3ZhciBhPXMubWFwKGZ1bmN0aW9uKHQpe3ZhciBlPXQuZml0O3JldHVybntsZWZ0OmUueCx0b3A6ZS55fX0pO3JldHVybiByLnVwZGF0ZUhlaWdodChvLnJvb3QuaCksYX0sbj1mdW5jdGlvbih0KXt0aGlzLmluaXQodCl9O24ucHJvdG90eXBlPXtpbml0OmZ1bmN0aW9uKHQpe3RoaXMucm9vdD17eDowLHk6MCx3OnR9fSxmaXQ6ZnVuY3Rpb24odCl7dmFyIGUscixpLG49dC5sZW5ndGgsbz1uPjA/dFswXS5oOjA7Zm9yKHRoaXMucm9vdC5oPW8sZT0wO2U8bjtlKyspaT10W2VdLChyPXRoaXMuZmluZE5vZGUodGhpcy5yb290LGkudyxpLmgpKT9pLmZpdD10aGlzLnNwbGl0Tm9kZShyLGkudyxpLmgpOmkuZml0PXRoaXMuZ3Jvd0Rvd24oaS53LGkuaCl9LGZpbmROb2RlOmZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdC51c2VkP3RoaXMuZmluZE5vZGUodC5yaWdodCxlLHIpfHx0aGlzLmZpbmROb2RlKHQuZG93bixlLHIpOmU8PXQudyYmcjw9dC5oP3Q6bnVsbH0sc3BsaXROb2RlOmZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdC51c2VkPSEwLHQuZG93bj17eDp0LngseTp0Lnkrcix3OnQudyxoOnQuaC1yfSx0LnJpZ2h0PXt4OnQueCtlLHk6dC55LHc6dC53LWUsaDpyfSx0fSxncm93RG93bjpmdW5jdGlvbih0LGUpe3ZhciByO3JldHVybiB0aGlzLnJvb3Q9e3VzZWQ6ITAseDowLHk6MCx3OnRoaXMucm9vdC53LGg6dGhpcy5yb290LmgrZSxkb3duOnt4OjAseTp0aGlzLnJvb3QuaCx3OnRoaXMucm9vdC53LGg6ZX0scmlnaHQ6dGhpcy5yb290fSwocj10aGlzLmZpbmROb2RlKHRoaXMucm9vdCx0LGUpKT90aGlzLnNwbGl0Tm9kZShyLHQsZSk6bnVsbH19LGUuYT1pfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSgpe1N0cmluZy5wcm90b3R5cGUuaW5jbHVkZXN8fChTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJudW1iZXJcIiE9dHlwZW9mIGUmJihlPTApLCEoZSt0Lmxlbmd0aD50aGlzLmxlbmd0aCkmJi0xIT09dGhpcy5pbmRleE9mKHQsZSl9KSxBcnJheS5wcm90b3R5cGUuaW5jbHVkZXN8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsXCJpbmNsdWRlc1wiLHt2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKG51bGw9PXRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO3ZhciByPU9iamVjdCh0aGlzKSxpPXIubGVuZ3RoPj4+MDtpZigwPT09aSlyZXR1cm4hMTtmb3IodmFyIG49MHxlLG89TWF0aC5tYXgobj49MD9uOmktTWF0aC5hYnMobiksMCk7bzxpOyl7aWYoZnVuY3Rpb24odCxlKXtyZXR1cm4gdD09PWV8fFwibnVtYmVyXCI9PXR5cGVvZiB0JiZcIm51bWJlclwiPT10eXBlb2YgZSYmaXNOYU4odCkmJmlzTmFOKGUpfShyW29dLHQpKXJldHVybiEwO28rK31yZXR1cm4hMX19KX1lLmE9aX0sZnVuY3Rpb24odCxlLHIpe31dKTsiXX0=